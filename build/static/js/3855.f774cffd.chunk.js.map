{"version":3,"file":"static/js/3855.f774cffd.chunk.js","mappings":"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","sources":["views/home/context.ts","views/home/components/PositionItem.tsx","views/home/components/UnStakingModal.tsx","views/home/components/StakingModal.tsx","views/home/components/OptionStaking.tsx","views/home/components/StakingPoolItem.tsx","views/home/components/GlobalData.tsx","views/home/components/PageToggle.tsx","views/home/components/Hero.tsx","views/home/index.tsx"],"sourcesContent":["import { createContext } from \"react\";\n\nexport interface FarmContextProps {\n  unStakedFarms: string[];\n  updateUnStakedFarms: (farm: string) => void;\n  deleteUnStakedFarms: (farm: string) => void;\n}\n\nexport default createContext<FarmContextProps>({} as FarmContextProps);\n","import { Checkbox, Box, Typography, useTheme } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { usePosition } from \"hooks/swap/usePosition\";\nimport { toFormat } from \"utils/index\";\nimport { TokenImage } from \"components/Image/Token\";\nimport PositionRangeState from \"components/swap/PositionRangeState\";\nimport { useState, useMemo } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport { formatTickPrice } from \"utils/swap/formatTickPrice\";\nimport { Bound } from \"constants/swap\";\nimport { getPriceOrderingFromPositionForUI, useInverter } from \"@w2e/swap-sdk\";\nimport useIsTickAtLimit from \"hooks/swap/useIsTickAtLimit\";\nimport LoadingRow from \"components/Loading/LoadingRow\";\nimport { useUSDPriceById } from \"hooks/useUSDPrice\";\nimport { BigNumber } from \"bignumber.js\";\nimport { formatDollarAmount } from \"@w2e/utils\";\n\nconst useStyle = makeStyles(() => ({\n  selectNFTBox: {\n    position: \"relative\",\n  },\n  nft: {\n    width: \"160px\",\n    filter: \"grayscale(100%)\",\n  },\n  checked: {\n    width: \"160px\",\n    border: \"1px solid #5669DC\",\n    filter: \"drop-shadow(0px 0px 4px #5669DC)\",\n    borderRadius: \"22px\",\n  },\n  checkbox: {\n    \"&.noLiquidity\": {\n      filter: \"grayscale(100%)!important\",\n    },\n  },\n}));\n\nfunction ArrowIcon() {\n  return (\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g clipPath=\"url(#clip0_32128_12869)\">\n        <path d=\"M11.06 5.72656L8 8.7799L4.94 5.72656L4 6.66656L8 10.6666L12 6.66656L11.06 5.72656Z\" fill=\"#8492C4\" />\n      </g>\n      <defs>\n        <clipPath id=\"clip0_32128_12869\">\n          <rect width=\"16\" height=\"16\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n}\n\ninterface DetailsItemProps {\n  label: string | undefined;\n  value: string | undefined;\n}\n\nfunction DetailsItem({ label, value }: DetailsItemProps) {\n  return (\n    <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      <Typography>{label}</Typography>\n      <Typography color=\"text.primary\">{value}</Typography>\n    </Box>\n  );\n}\n\nexport type PositionInfo = {\n  id: bigint;\n  tickUpper: bigint;\n  liquidity: bigint;\n  tickLower: bigint;\n};\n\ninterface PositionItemProps {\n  positionInfo: PositionInfo;\n  setSelectedPositionId: (positionId: number | undefined) => void;\n  selectedPositionId: number | undefined;\n  poolId: string;\n}\n\nexport function PositionItem({ positionInfo, selectedPositionId, setSelectedPositionId, poolId }: PositionItemProps) {\n  const classes = useStyle();\n  const theme = useTheme() as Theme;\n\n  const [show, setShow] = useState(false);\n\n  const { position } = usePosition({\n    poolId,\n    tickLower: positionInfo.tickLower,\n    tickUpper: positionInfo.tickUpper,\n    liquidity: positionInfo.liquidity,\n  });\n\n  const pool = position?.pool;\n  const tickUpper = position?.tickUpper;\n  const tickLower = position?.tickLower;\n\n  const token0 = pool?.token0;\n  const token1 = pool?.token1;\n\n  const token0Amount = position?.amount0.toSignificant(8);\n  const token1Amount = position?.amount1.toSignificant(8);\n\n  const outOfRange =\n    pool && (tickUpper || tickUpper === 0) && (tickLower || tickLower === 0)\n      ? pool.tickCurrent < tickLower || pool.tickCurrent >= tickUpper\n      : false;\n\n  const closed = position?.liquidity?.toString() === \"0\";\n\n  const pricesFromPosition = getPriceOrderingFromPositionForUI(position);\n\n  // handle manual inversion\n  const { priceLower, priceUpper, base } = useInverter({\n    priceLower: pricesFromPosition?.priceLower,\n    priceUpper: pricesFromPosition?.priceUpper,\n    quote: pricesFromPosition?.quote,\n    base: pricesFromPosition?.base,\n    invert: false,\n  });\n\n  const inverted = token1 ? base?.equals(token1) : undefined;\n\n  const currencyQuote = inverted ? token0 : token1;\n  const currencyBase = inverted ? token1 : token0;\n\n  const pairName = useMemo(() => {\n    return `${currencyQuote?.symbol} per ${currencyBase?.symbol}`;\n  }, [currencyQuote, currencyBase]);\n\n  const _tickAtLimit = useIsTickAtLimit(pool?.fee, tickLower, tickUpper);\n\n  const tickAtLimit = useMemo(() => {\n    if (!inverted) return _tickAtLimit;\n\n    return {\n      [Bound.LOWER]: _tickAtLimit[Bound.UPPER] ? true : undefined,\n      [Bound.UPPER]: _tickAtLimit[Bound.LOWER] ? true : undefined,\n    };\n  }, [_tickAtLimit, inverted]);\n\n  const token0USDPrice = useUSDPriceById(position?.pool.token0.address);\n  const token1USDPrice = useUSDPriceById(position?.pool.token1.address);\n\n  const totalUSDValue = useMemo(() => {\n    if (!position || !token0USDPrice || !token1USDPrice) return undefined;\n\n    const totalUSD = new BigNumber(token0USDPrice)\n      .multipliedBy(position.amount0.toExact())\n      .plus(new BigNumber(token1USDPrice).multipliedBy(position.amount1.toExact()));\n\n    return totalUSD.toString();\n  }, [position, token0USDPrice, token1USDPrice]);\n\n  const handleToggle = () => {\n    setShow(!show);\n  };\n\n  return (\n    <Box className={classes.selectNFTBox}>\n      {position ? (\n        <>\n          <Box\n            sx={{\n              display: \"grid\",\n              gridTemplateColumns: \"1fr auto\",\n              height: \"64px\",\n              alignItems: \"center\",\n              cursor: \"pointer\",\n              padding: \"0 12px\",\n              \"&:hover\": {\n                background: theme.palette.background.level2,\n              },\n            }}\n            onClick={handleToggle}\n          >\n            <Box\n              sx={{\n                display: \"flex\",\n                alignItems: \"center\",\n                gap: \"0 100px\",\n                \"@media(max-width:640px)\": {\n                  flexDirection: \"column\",\n                  gap: \"4px 0\",\n                  alignItems: \"flex-start\",\n                },\n              }}\n            >\n              <Box\n                sx={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  gap: \"0 5px\",\n                  \"@media(max-width: 640px)\": {\n                    gap: \"0 2px\",\n                  },\n                }}\n              >\n                <Checkbox\n                  className={classes.checkbox}\n                  checked={Number(positionInfo.id) === selectedPositionId}\n                  onChange={() => {\n                    if (selectedPositionId === Number(positionInfo.id)) {\n                      setSelectedPositionId(undefined);\n                      return;\n                    }\n                    if (positionInfo.liquidity !== BigInt(0)) {\n                      setSelectedPositionId(Number(positionInfo.id));\n                    }\n                  }}\n                  onClick={(event: any) => {\n                    event.stopPropagation();\n                    event.nativeEvent.stopImmediatePropagation();\n                  }}\n                />\n\n                <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n                  <TokenImage logo={position.pool.token0.logo} size=\"24px\" tokenId={position.pool.token0.address} />\n                  <Box sx={{ position: \"relative\", left: \"-5px\" }}>\n                    <TokenImage logo={position.pool.token1.logo} size=\"24px\" tokenId={position.pool.token1.address} />\n                  </Box>\n                </Box>\n\n                <Typography\n                  color=\"text.primary\"\n                  fontWeight={500}\n                  sx={{\n                    \"@media(max-width: 640px)\": {\n                      fontSize: \"12px\",\n                    },\n                  }}\n                >\n                  {position.pool.token0.symbol} / {position.pool.token1.symbol}\n                </Typography>\n              </Box>\n\n              <Typography\n                color=\"text.primary\"\n                sx={{\n                  \"@media(max-width: 640px)\": {\n                    fontSize: \"12px\",\n                    padding: \"0 0 0 32px\",\n                  },\n                }}\n              >\n                {totalUSDValue ? formatDollarAmount(totalUSDValue) : \"--\"}\n              </Typography>\n            </Box>\n\n            <Box sx={{ display: \"flex\", alignItems: \"center\", gap: \"0 4px\" }}>\n              <PositionRangeState outOfRange={outOfRange} closed={closed} />\n              <ArrowIcon />\n            </Box>\n          </Box>\n\n          {show ? (\n            <Box\n              sx={{\n                background: theme.palette.background.level2,\n                padding: \"20px 12px\",\n                display: \"flex\",\n                gap: \"24px 0\",\n                flexDirection: \"column\",\n              }}\n            >\n              <DetailsItem\n                label={token0 ? `${token0?.symbol} Amount` : \"--\"}\n                value={token0 ? `${token0Amount} ${token0.symbol}` : \"--\"}\n              />\n              <DetailsItem\n                label={token1 ? `${token1?.symbol} Amount` : \"--\"}\n                value={token1 ? `${token1Amount} ${token1.symbol}` : \"--\"}\n              />\n              <DetailsItem\n                label=\"Current Price\"\n                value={\n                  !!token1 && !!token0\n                    ? inverted\n                      ? pool?.priceOf(token1)\n                        ? `${toFormat(pool?.priceOf(token1).toSignificant(6))} ${pairName}`\n                        : \"--\"\n                      : pool?.priceOf(token0)\n                        ? `${toFormat(pool?.priceOf(token0).toSignificant(6))} ${pairName}`\n                        : \"--\"\n                    : \"--\"\n                }\n              />\n              <DetailsItem\n                label=\"Price Range\"\n                value={`${formatTickPrice(priceLower, tickAtLimit, Bound.LOWER)} - ${formatTickPrice(\n                  priceUpper,\n                  tickAtLimit,\n                  Bound.UPPER,\n                )} ${pairName}`}\n              />\n            </Box>\n          ) : null}\n        </>\n      ) : (\n        <LoadingRow>\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n        </LoadingRow>\n      )}\n    </Box>\n  );\n}\n","import { useState } from \"react\";\nimport { Button, Box, Grid, CircularProgress, useTheme } from \"@mui/material\";\nimport { t } from \"@lingui/macro\";\nimport { useTips } from \"hooks/useTips\";\nimport { getLocaleMessage } from \"locales/services\";\nimport Identity, { CallbackProps } from \"components/Identity\";\nimport { NoData, Modal } from \"components/index\";\nimport type { StakingFarmInfo, StakingFarmDepositArgs, ActorIdentity } from \"@w2e/types\";\nimport { unStake } from \"hooks/staking-farm\";\nimport { Theme } from \"@mui/material/styles\";\nimport { PositionItem } from \"./PositionItem\";\n\nexport interface UnStakingModalProps {\n  open: boolean;\n  onClose: () => void;\n  resetData?: () => void;\n  farm: StakingFarmInfo;\n  userAllPositions: StakingFarmDepositArgs[];\n}\n\nexport default function UnStakingModal({ open, onClose, resetData, farm, userAllPositions }: UnStakingModalProps) {\n  const theme = useTheme() as Theme;\n  const [openTip] = useTips();\n\n  const [confirmLoading, setConfirmLoading] = useState(false);\n\n  const [selectedPositionId, setSelectedPositionId] = useState<number | undefined>(undefined);\n\n  const handelUnStakeToken = async (identity: ActorIdentity) => {\n    if (!identity || !selectedPositionId) return;\n\n    setConfirmLoading(true);\n    const { status, message } = await unStake(identity, farm.farmCid, BigInt(selectedPositionId));\n    openTip(getLocaleMessage(message), status);\n    setConfirmLoading(false);\n    if (resetData) resetData();\n    if (onClose) onClose();\n  };\n\n  const handleSubmit = async (identity: ActorIdentity) => {\n    if (!identity) return;\n    handelUnStakeToken(identity);\n  };\n\n  return (\n    <Modal\n      maxWidth=\"md\"\n      open={open}\n      onClose={onClose}\n      title={t`Select a position`}\n      dialogProps={{\n        sx: {\n          \"& .MuiDialog-paper\": {\n            width: \"632px\",\n          },\n          \"& .MuiDialogContent-root\": {\n            padding: \"0\",\n          },\n          \"& .MuiDialogTitle-root\": {\n            padding: \"8px 12px\",\n          },\n        },\n      }}\n      background={theme.palette.background.level1}\n    >\n      <Grid style={{ minHeight: \"300px\" }}>\n        <Box\n          sx={{\n            maxHeight: \"340px\",\n            overflow: \"auto\",\n          }}\n        >\n          {userAllPositions.map((position, index) => {\n            return (\n              <PositionItem\n                key={index}\n                poolId={farm.pool}\n                positionInfo={{\n                  id: position.positionId,\n                  liquidity: position.liquidity,\n                  tickLower: position.tickLower,\n                  tickUpper: position.tickUpper,\n                }}\n                selectedPositionId={selectedPositionId}\n                setSelectedPositionId={setSelectedPositionId}\n              />\n            );\n          })}\n\n          {!userAllPositions.length && <NoData />}\n        </Box>\n\n        <Box mt=\"20px\" sx={{ padding: \"0 24px\" }}>\n          <Identity onSubmit={handleSubmit}>\n            {({ submit }: CallbackProps) => (\n              <Button\n                disabled={confirmLoading || !selectedPositionId}\n                variant=\"contained\"\n                fullWidth\n                type=\"button\"\n                onClick={submit}\n                color=\"primary\"\n                size=\"large\"\n                startIcon={confirmLoading ? <CircularProgress size={24} color=\"inherit\" /> : null}\n              >\n                {t`Confirm`}\n              </Button>\n            )}\n          </Identity>\n        </Box>\n      </Grid>\n    </Modal>\n  );\n}\n","import { useState, useMemo } from \"react\";\nimport { Button, Grid, CircularProgress, Box, useTheme } from \"@mui/material\";\nimport { t } from \"@lingui/macro\";\nimport { useTips } from \"hooks/useTips\";\nimport { stake } from \"hooks/staking-farm\";\nimport { getLocaleMessage } from \"locales/services\";\nimport Identity, { CallbackProps } from \"components/Identity\";\nimport { NoData, ListLoading, Modal } from \"components/index\";\nimport { Identity as CallIdentity, ResultStatus } from \"types/global\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { useSwapUserPositions, approvePosition } from \"@w2e/hooks\";\nimport type { StakingFarmInfo } from \"@w2e/types\";\nimport { collectPositionFee } from \"hooks/swap/useClaimFees\";\nimport { Theme } from \"@mui/material/styles\";\nimport { PositionItem } from \"./PositionItem\";\n\nexport interface StakingModalProps {\n  open: boolean;\n  onClose: () => void;\n  resetData?: () => void;\n  farm: StakingFarmInfo;\n}\n\nexport default function StakingModal({ open, onClose, resetData, farm }: StakingModalProps) {\n  const [openTip] = useTips();\n\n  const principal = useAccountPrincipal();\n\n  const swapPoolId = farm.pool;\n\n  const [confirmLoading, setConfirmLoading] = useState(false);\n  const [selectedPositionId, setSelectedPositionId] = useState<number | undefined>(undefined);\n\n  const { result: allUserPositions, loading } = useSwapUserPositions(farm.pool, principal?.toString());\n\n  const selectedPosition = useMemo(() => {\n    if (!allUserPositions || !selectedPositionId) return undefined;\n    return allUserPositions.filter((position) => Number(position.id) === selectedPositionId)[0];\n  }, [allUserPositions, selectedPositionId]);\n\n  const handleSubmit = async (identity: CallIdentity) => {\n    if (!identity || !principal || !selectedPositionId || !selectedPosition) return;\n\n    setConfirmLoading(true);\n\n    const { status: approveStatus, message: approveMessage } = await approvePosition(\n      identity,\n      swapPoolId,\n      farm.farmCid,\n      selectedPosition.id,\n    );\n\n    if (approveStatus === ResultStatus.ERROR) {\n      openTip(approveMessage, approveStatus);\n      setConfirmLoading(false);\n      return;\n    }\n\n    await collectPositionFee(swapPoolId, selectedPosition.id);\n\n    const { status, message } = await stake(identity, farm.farmCid, BigInt(selectedPositionId));\n\n    openTip(getLocaleMessage(message), status);\n\n    setConfirmLoading(false);\n\n    if (resetData) resetData();\n    if (onClose) onClose();\n  };\n\n  const theme = useTheme() as Theme;\n\n  return (\n    <Modal\n      maxWidth=\"md\"\n      open={open}\n      onClose={onClose}\n      title={t`Select a position`}\n      dialogProps={{\n        sx: {\n          \"& .MuiDialog-paper\": {\n            width: \"632px\",\n          },\n          \"& .MuiDialogContent-root\": {\n            padding: \"0\",\n          },\n          \"& .MuiDialogTitle-root\": {\n            padding: \"8px 12px\",\n          },\n        },\n      }}\n      background={theme.palette.background.level1}\n    >\n      <Grid style={{ minHeight: \"300px\" }}>\n        <Box\n          sx={{\n            minHeight: \"300px\",\n            maxHeight: \"580px\",\n            overflow: \"hidden auto\",\n          }}\n        >\n          {loading ? (\n            <ListLoading mask={false} loading={loading} />\n          ) : (\n            <Box sx={{ maxHeight: \"340px\", overflow: \"auto\" }}>\n              <Box>\n                {allUserPositions?.map((position, index) => {\n                  return (\n                    <PositionItem\n                      key={index}\n                      poolId={farm.pool}\n                      positionInfo={{\n                        id: position.id,\n                        liquidity: position.liquidity,\n                        tickLower: position.tickLower,\n                        tickUpper: position.tickUpper,\n                      }}\n                      selectedPositionId={selectedPositionId}\n                      setSelectedPositionId={setSelectedPositionId}\n                    />\n                  );\n                })}\n\n                {!allUserPositions?.length && <NoData />}\n              </Box>\n            </Box>\n          )}\n        </Box>\n\n        <Box mt=\"20px\" sx={{ padding: \"0 24px\" }}>\n          <Identity onSubmit={handleSubmit}>\n            {({ submit }: CallbackProps) => (\n              <Button\n                disabled={confirmLoading || !selectedPositionId}\n                variant=\"contained\"\n                fullWidth\n                type=\"button\"\n                onClick={submit}\n                color=\"primary\"\n                size=\"large\"\n                startIcon={confirmLoading ? <CircularProgress size={24} color=\"inherit\" /> : null}\n              >\n                {t`Confirm`}\n              </Button>\n            )}\n          </Identity>\n        </Box>\n      </Grid>\n    </Modal>\n  );\n}\n","import { useState } from \"react\";\nimport { Grid, Button } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { getFarmsState, POOL_STATE } from \"utils/staking-farm\";\nimport { Theme } from \"@mui/material/styles\";\nimport type { StakingFarmInfo, StakingFarmDepositArgs } from \"@w2e/types\";\nimport UnStakingModal from \"./UnStakingModal\";\nimport StakingModal from \"./StakingModal\";\n\nconst useStyle = makeStyles((theme: Theme) => ({\n  button: {\n    minWidth: \"28px\",\n    width: \"28px\",\n    height: \"28px\",\n    lineHeight: \"100%\",\n    background: \"#29314F\",\n    borderRadius: \"8px\",\n    fontSize: \"28px\",\n    fontWeight: \"normal\",\n    color: theme.palette.mode === \"dark\" ? theme.colors.darkTextSecondary : theme.colors.lightPrimaryMain,\n    \"&.Mui-disabled\": {\n      color: \"#666\",\n    },\n  },\n}));\n\nexport default function OptionStaking({\n  farm,\n  resetData,\n  userIncentives,\n  userAllPositions,\n}: {\n  farm: StakingFarmInfo;\n  userIncentives: StakingFarmInfo | undefined;\n  resetData?: () => void;\n  userAllPositions: StakingFarmDepositArgs[];\n}) {\n  const [unStakingModal, setUnStakingModal] = useState(false);\n  const [stakingModal, setStakingModal] = useState(false);\n  const classes = useStyle();\n\n  const state = getFarmsState(farm);\n\n  return (\n    <>\n      <Grid container sx={{ gap: \"0 10px\" }} justifyContent=\"flex-end\">\n        <Button\n          disabled={(userIncentives?.numberOfStakes ?? 0).toString() === \"0\"}\n          className={classes.button}\n          onClick={() => {\n            setUnStakingModal(true);\n          }}\n        >\n          -\n        </Button>\n        <Button\n          disabled={state !== POOL_STATE.LIVE}\n          className={classes.button}\n          onClick={() => {\n            setStakingModal(true);\n          }}\n        >\n          +\n        </Button>\n      </Grid>\n\n      {stakingModal && (\n        <StakingModal open={stakingModal} onClose={() => setStakingModal(false)} farm={farm} resetData={resetData} />\n      )}\n\n      {unStakingModal && (\n        <UnStakingModal\n          open={unStakingModal}\n          onClose={() => setUnStakingModal(false)}\n          farm={farm}\n          resetData={resetData}\n          userAllPositions={userAllPositions}\n        />\n      )}\n    </>\n  );\n}\n","import React, { useMemo, useState, useContext, useEffect } from \"react\";\nimport { Grid, CardActions, CardContent, Collapse, Typography, Link, Box } from \"@mui/material\";\nimport ConnectWallet from \"components/authentication/ButtonConnector\";\nimport { MainCard, TokenImage } from \"components/index\";\nimport {\n  useIntervalUserRewardInfo,\n  useIntervalUserFarmInfo,\n  useV3StakingCycles,\n  useFarmUSDValue,\n} from \"hooks/staking-farm\";\nimport CountUp from \"react-countup\";\nimport { makeStyles, useTheme } from \"@mui/styles\";\nimport { useToken } from \"hooks/useCurrency\";\nimport { INFO_URL, AnonymousPrincipal } from \"constants/index\";\nimport { useAccountPrincipal, useConnectorStateConnected } from \"store/auth/hooks\";\nimport { t, Trans } from \"@lingui/macro\";\nimport {\n  parseTokenAmount,\n  toSignificant,\n  cycleValueFormat,\n  shorten,\n  timestampFormat,\n  explorerLink,\n} from \"@w2e/utils\";\nimport { useV3FarmMetadata, useFarmUserAllPositions } from \"@w2e/hooks\";\nimport Countdown from \"react-countdown\";\nimport { ICRocksLoadIcon } from \"components/Layout/Header/ProfileSection\";\nimport { Theme } from \"@mui/material/styles\";\nimport { STATE } from \"types/staking-farm\";\nimport type { StakingFarmInfo } from \"@w2e/types\";\nimport upperFirst from \"lodash/upperFirst\";\nimport FarmContext from \"../context\";\nimport OptionStaking from \"./OptionStaking\";\n\nconst useStyle = makeStyles(() => ({\n  cardHeader: {\n    height: \"196px\",\n    background: \"rgba(101, 80, 186, 0.18)\",\n    borderRadius: \"4px 4px 0 0\",\n    position: \"relative\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n  },\n  headerImage: {\n    marginTop: \"50px\",\n    marginBottom: \"26px\",\n    position: \"relative\",\n    \"& .poolImageBox\": {\n      marginTop: \"-34px\",\n      marginBottom: \"16px\",\n      marginLeft: \"-10px\",\n      left: \"50px\",\n      position: \"absolute\",\n    },\n  },\n  collapseContent: {\n    padding: 0,\n    width: \"calc(100% - 48px)\",\n    margin: \"0 auto\",\n    borderTop: \"1px solid #313A5A\",\n  },\n}));\n\nconst CountdownBox = ({ startTime, endTime }: { startTime: number; endTime: number }) => {\n  const nowTime = parseInt(String(Date.now() / 1000));\n  let expand = false;\n  let date = startTime;\n  if (nowTime > endTime) {\n    expand = true;\n  }\n  if (nowTime < startTime) {\n    date = startTime * 1000;\n  } else if (nowTime > startTime && nowTime < endTime) {\n    date = endTime * 1000;\n  } else {\n    date = 0;\n  }\n\n  return expand ? (\n    <Typography color=\"text.primary\">\n      <Trans>End</Trans>\n    </Typography>\n  ) : (\n    <Countdown date={date} />\n  );\n};\n\nexport type FarmPoolProps = { stakeOnly: boolean; state: STATE; farm: StakingFarmInfo };\n\nexport default function FarmPool({ farm, state, stakeOnly }: FarmPoolProps) {\n  const classes = useStyle();\n  const theme = useTheme() as Theme;\n\n  const principal = useAccountPrincipal();\n\n  const [expanded, setExpanded] = React.useState(false);\n\n  const [forceUpdate, setForceUpdate] = useState(false);\n\n  const userFarmInfo = useIntervalUserFarmInfo(farm.farmCid, principal?.toString() ?? AnonymousPrincipal);\n\n  const { result: userAllPositions } = useFarmUserAllPositions(farm.farmCid, principal?.toString(), forceUpdate);\n\n  const positionIds = useMemo(() => {\n    return userAllPositions.map((position) => BigInt(position.positionId));\n  }, [userAllPositions]);\n\n  const userRewardAmount = useIntervalUserRewardInfo(farm.farmCid, positionIds);\n\n  const [, token0] = useToken(farm.poolToken0.address) ?? undefined;\n  const [, token1] = useToken(farm.poolToken1.address) ?? undefined;\n\n  const [, rewardToken] = useToken(farm.rewardToken.address) ?? undefined;\n\n  const { poolTVL, userTVL, userRewardUSD, parsedUserRewardAmount } = useFarmUSDValue({\n    token0,\n    token1,\n    rewardToken,\n    farm,\n    userRewardAmount,\n    userFarmInfo,\n  });\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const handleGoToGetPosition = () => {\n    window.open(`/swap/liquidity/add/${farm.poolToken0.address}/${farm.poolToken1.address}`, \"_target\");\n  };\n\n  const walletIsConnected = useConnectorStateConnected();\n\n  const { updateUnStakedFarms, deleteUnStakedFarms } = useContext(FarmContext);\n\n  useEffect(() => {\n    if (positionIds !== undefined) {\n      if (positionIds.length === 0) {\n        updateUnStakedFarms(farm.farmCid);\n      } else {\n        deleteUnStakedFarms(farm.farmCid);\n      }\n    }\n  }, [positionIds?.length]);\n\n  const { result: farmMetadata } = useV3FarmMetadata(farm.farmCid);\n  const { result: cycles } = useV3StakingCycles(farm.farmCid);\n\n  return (\n    <Box>\n      <MainCard\n        level={1}\n        padding=\"0px\"\n        sx={{\n          display: stakeOnly && userAllPositions.length === 0 ? \"none\" : \"block\",\n          width: \"384px\",\n          overflow: \"hidden\",\n          height: \"fit-content\",\n          \"@media (max-width: 520px)\": {\n            width: \"340px\",\n          },\n        }}\n      >\n        <Box sx={{ maxWidth: 400 }}>\n          <Grid className={classes.cardHeader}>\n            <Typography\n              sx={{\n                position: \"absolute\",\n                top: 0,\n                left: 0,\n                minWidth: \"77px\",\n                height: \"30px\",\n                padding: \"6px\",\n                background: \"#654DA9\",\n                borderRadius: \"4px 0 4px 0\",\n                textAlign: \"center\",\n                border: \"1px solid #654DA9\",\n                color: theme.palette.mode === \"dark\" ? theme.colors.darkTextPrimary : theme.colors.primaryMain,\n              }}\n            >\n              {state === STATE.NOT_STARTED ? upperFirst(t`Unstart`) : upperFirst(state)}\n            </Typography>\n\n            <Grid item className={classes.headerImage}>\n              <TokenImage size=\"80px\" logo={rewardToken?.logo} tokenId={rewardToken?.address} />\n\n              <Grid container className=\"poolImageBox\">\n                <Box sx={{ display: \"flex\" }}>\n                  <TokenImage size=\"44px\" logo={token0?.logo} tokenId={token0?.address} />\n                  <TokenImage size=\"44px\" logo={token1?.logo} tokenId={token1?.address} />\n                </Box>\n              </Grid>\n            </Grid>\n\n            <Grid>\n              <Grid item>\n                <Typography color=\"text.primary\" sx={{ padding: \"0 12px\" }}>\n                  Stake {token0?.symbol}/{token1?.symbol} position(LP) to earn {rewardToken?.symbol}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"20px 0\", padding: \"24px\" }}>\n            <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Typography>\n                <Trans>Total Reward Amount</Trans>\n              </Typography>\n              <Box sx={{ flex: \"1\", display: \"flex\", justifyContent: \"flex-end\" }}>\n                <CountUp\n                  preserveValue\n                  end={parseTokenAmount(\n                    farm?.totalReward ?? farm.totalRewardUnclaimed,\n                    rewardToken?.decimals,\n                  ).toNumber()}\n                  decimals={2}\n                  duration={1}\n                  separator=\",\"\n                />\n              </Box>\n            </Grid>\n\n            <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Typography>\n                <Trans>Total Value Staked</Trans>\n              </Typography>\n              <Typography color=\"text.primary\">${poolTVL}</Typography>\n            </Grid>\n\n            <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Typography>\n                <Trans>Earned</Trans>\n                &nbsp;\n                {rewardToken?.symbol}\n              </Typography>\n\n              <Grid item>\n                <Grid container direction=\"column\" justifyContent=\"flex-end\">\n                  <CountUp preserveValue end={parsedUserRewardAmount ?? 0} decimals={6} duration={1} separator=\",\" />\n                  <CountUp\n                    style={{ fontSize: 14, textAlign: \"right\", display: \"block\" }}\n                    preserveValue\n                    end={userRewardUSD ?? 0}\n                    decimals={2}\n                    duration={1}\n                    separator=\",\"\n                    prefix=\"~$\"\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n\n            <Box>\n              <Typography mb=\"14px\">\n                <Trans>Position(LP) Staked</Trans>\n              </Typography>\n\n              <Box\n                sx={{\n                  display: \"flex\",\n                  height: \"44px\",\n                  lineHeight: \"42px\",\n                  background: \"#111936\",\n                  border: \"1px solid #29314F\",\n                  borderRadius: \"8px\",\n                  padding: \"0 14px\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Typography sx={{ flex: 1 }}>{Number(positionIds.length ?? 0)}</Typography>\n                {walletIsConnected ? (\n                  <OptionStaking\n                    farm={farm}\n                    resetData={() => setForceUpdate(!forceUpdate)}\n                    userIncentives={userFarmInfo}\n                    userAllPositions={userAllPositions}\n                  />\n                ) : (\n                  <ConnectWallet />\n                )}\n              </Box>\n            </Box>\n\n            <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Grid item>\n                <Typography>\n                  <Trans>Your Total Value Staked</Trans>\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography color=\"text.primary\">${userTVL}</Typography>\n              </Grid>\n            </Grid>\n          </Box>\n\n          <CardActions disableSpacing style={{ paddingTop: 0 }}>\n            <Grid container justifyContent=\"center\" onClick={handleExpandClick}>\n              <Typography\n                sx={{\n                  fontWeight: \"500\",\n                  fontSize: \"14px\",\n                  lineHeight: \"24px\",\n                  textAlign: \"center\",\n                  color: \"#648EFB\",\n                  cursor: \"pointer\",\n                }}\n              >\n                {expanded ? t`Hide` : t`Details`}\n              </Typography>\n            </Grid>\n          </CardActions>\n\n          <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n            <CardContent style={{ paddingTop: 0 }} className={classes.collapseContent}>\n              <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"20px 0\", maxWidth: 400, paddingTop: \"24px\" }}>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n                  <Grid item>\n                    <Typography sx={{ cursor: \"pointer\", textDecoration: \"underline\" }} onClick={handleGoToGetPosition}>\n                      Get {token0?.symbol}/{token1?.symbol} position(LP)\n                      <ICRocksLoadIcon\n                        fontSize=\"24\"\n                        sx={{\n                          position: \"relative\",\n                          top: \"3px\",\n                          cursor: \"pointer\",\n                          marginLeft: \"5px\",\n                          color: theme.colors.secondaryMain,\n                        }}\n                      />\n                    </Typography>\n                  </Grid>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n                  <Typography>\n                    <Trans>Total number of staked positions</Trans>\n                  </Typography>\n                  <Typography color=\"text.primary\">{(userFarmInfo?.numberOfStakes ?? 0).toString()}</Typography>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n                  <Typography>\n                    <Trans>Claimed Rewards</Trans>\n                  </Typography>\n                  <Typography color=\"text.primary\">\n                    {toSignificant(\n                      parseTokenAmount(\n                        farmMetadata?.totalRewardClaimed?.toString() ?? 0,\n                        rewardToken?.decimals,\n                      ).toString(),\n                      8,\n                      { groupSeparator: \",\" },\n                    )}\n                  </Typography>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n                  <Typography>\n                    <Trans>Unclaimed Rewards</Trans>\n                  </Typography>\n                  <Typography color=\"text.primary\">\n                    {toSignificant(\n                      parseTokenAmount(\n                        farmMetadata?.totalRewardUnclaimed?.toString() ?? 0,\n                        rewardToken?.decimals,\n                      ).toString(),\n                      8,\n                      { groupSeparator: \",\" },\n                    )}\n                  </Typography>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n                  <Typography>\n                    <Trans>Distribution Interval</Trans>\n                  </Typography>\n                  <Typography color=\"text.primary\">\n                    {Number(farmMetadata?.secondPerCycle ?? 0) / 60} <Trans>min</Trans>\n                  </Typography>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n                  <Typography>\n                    <Trans>Amount per Distribution</Trans>\n                  </Typography>\n                  <Typography color=\"text.primary\">\n                    {toSignificant(\n                      parseTokenAmount(farmMetadata?.rewardPerCycle, rewardToken?.decimals).toString(),\n                      8,\n                      { groupSeparator: \",\" },\n                    )}\n                  </Typography>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n                  <Typography>\n                    <Trans>Starting at</Trans>\n                  </Typography>\n                  <Typography color=\"text.primary\">{timestampFormat(Number(farm.startTime) * 1000)}</Typography>\n                </Grid>\n\n                <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n                  <Typography>{state === STATE.NOT_STARTED ? <Trans>Left</Trans> : <Trans>End in</Trans>}</Typography>\n                  <Typography color=\"text.primary\" component=\"div\">\n                    <CountdownBox startTime={Number(farm.startTime)} endTime={Number(farm.endTime)} />\n                  </Typography>\n                </Grid>\n                <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n                  <Typography>\n                    <Trans>Created by</Trans>\n                  </Typography>\n                  <Typography color=\"text.primary.main\">\n                    <Link href={`https://icscan.io/principal/${farm.creator.toString()}`} target=\"_blank\">\n                      {shorten(farm.creator.toString())}\n                    </Link>\n                  </Typography>\n                </Grid>\n                <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n                  <Typography>\n                    <Trans>Incentive pool Id</Trans>\n                  </Typography>\n                  <Typography color=\"text.primary\">\n                    <Link href={explorerLink(farm.farmCid)} target=\"_blank\">\n                      {shorten(farm.farmCid)}\n                    </Link>\n                  </Typography>\n                </Grid>\n                <Grid container justifyContent=\"space-between\" alignItems=\"flex-start\">\n                  <Typography>\n                    <Trans>Cycles left</Trans>\n                  </Typography>\n                  <Typography color=\"text.primary\">\n                    {cycles?.balance ? cycleValueFormat(cycles?.balance) : \"--\"}\n                  </Typography>\n                </Grid>\n\n                <Grid item container justifyContent=\"flex-end\">\n                  <Typography color=\"text.primary\">\n                    <Link href={`${INFO_URL}/staking-farm/details/${farm.farmCid}`} target=\"_blank\">\n                      <Trans>Farms Info</Trans>\n                    </Link>\n                  </Typography>\n                </Grid>\n              </Box>\n            </CardContent>\n          </Collapse>\n        </Box>\n      </MainCard>\n    </Box>\n  );\n}\n","import { useEffect } from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { gridSpacing } from \"constants/theme\";\nimport { useGetGlobalData } from \"hooks/staking-farm\";\nimport GlobalBg1 from \"assets/images/staking/1.png\";\nimport GlobalBg3 from \"assets/images/staking/3.png\";\nimport { Trans } from \"@lingui/macro\";\n\nconst useStyle = makeStyles(() => ({\n  item: {\n    height: \"145px\",\n    background: \"rgba(80, 95, 186, 0.34)\",\n    border: \"1px solid rgba(255, 255, 255, 0.04)\",\n    borderRadius: \"12px\",\n    padding: \"29px 25px\",\n    \"&.tvl\": {\n      background: `url(${GlobalBg1}) no-repeat center / cover`,\n    },\n    \"&.reward\": {\n      background: `url(${GlobalBg3}) no-repeat center / cover`,\n    },\n  },\n  itemTitle: {\n    paddingBottom: \"18px\",\n  },\n}));\n\nexport default function GlobalData() {\n  const classes = useStyle();\n  const [result, update] = useGetGlobalData();\n\n  useEffect(() => {\n    setTimeout(() => {\n      update();\n    }, 5000);\n  }, [result]);\n\n  return (\n    <Grid container spacing={gridSpacing}>\n      <Grid item xs={12} md={6}>\n        <Grid container className={`${classes.item} tvl`} direction=\"column\" justifyContent=\"center\">\n          <Grid item className={classes.itemTitle}>\n            <Typography color=\"text.primary\" fontSize=\"14px\">\n              <Trans>TVL</Trans>\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography color=\"text.primary\" fontSize=\"24px\">\n              {result?.stakeTokenTVL ?? \"-\"}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <Grid container className={`${classes.item} reward`} direction=\"column\" justifyContent=\"center\">\n          <Grid item className={classes.itemTitle}>\n            <Grid container>\n              <Typography color=\"text.primary\" fontSize=\"14px\" sx={{ display: \"inline-block\" }}>\n                <Trans>Total Farming Rewards</Trans>\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Typography color=\"text.primary\" fontSize=\"24px\">\n              {result?.rewardTokenTVL ?? \"-\"}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import { t } from \"@lingui/macro\";\nimport { STATE } from \"types/staking-farm\";\n\nexport type Page = {\n  label: string;\n  path: string;\n  state: STATE;\n};\n\nexport const Pages: Page[] = [\n  {\n    label: t`Live`,\n    path: `/staking-farm?state=${STATE.LIVE}`,\n    state: STATE.LIVE,\n  },\n  {\n    label: t`Unstart`,\n    path: `/staking-farm?state=${STATE.NOT_STARTED}`,\n    state: STATE.NOT_STARTED,\n  },\n  {\n    label: t`Finished`,\n    path: `/staking-farm?state=${STATE.FINISHED}`,\n    state: STATE.FINISHED,\n  },\n  {\n    label: t`Closure`,\n    path: `/staking-farm?state=${STATE.CLOSED}`,\n    state: STATE.CLOSED,\n  },\n];\n","import Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport { useState } from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Typography, Link, alpha } from '@mui/material';\nimport ReactPlayer from 'react-player';\n\nexport default function Hero() {\n    const [openDialog, setOpenDialog] = useState(false);\n\n    const handleTermsAgreement = () => {\n        setOpenDialog(false); // Close dialog\n        // Perform actions after agreement (e.g., create account)\n    };\n    return (\n        <Box\n            id=\"hero\"\n            sx={(theme) => ({\n                width: '100%',\n                backgroundImage:\n                    theme.palette.mode === 'light'\n                        ? 'linear-gradient(180deg, #CEE5FD, #)'\n                        : `linear-gradient(#02294F, ${alpha('#090E10', 0.0)})`,\n                backgroundSize: '100% 20%',\n                backgroundRepeat: 'no-repeat',\n            })}\n        >\n            <Container\n                sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    pt: { xs: 8, sm: 20 },\n                    pb: { xs: 8, sm: 12 },\n                }}\n            >\n                <Stack spacing={3} useFlexGap sx={{ width: { xs: '100%', sm: '70%' } }}>\n                    <Typography\n                        variant=\"h1\"\n                        sx={{\n                            display: 'flex',\n                            flexDirection: { xs: 'column', md: 'row' },\n                            alignSelf: 'center',\n                            textAlign: 'center',\n                            fontSize: 'clamp(3.5rem, 10vw, 4rem)',\n                        }}\n                    >\n                        Waste2Earn&nbsp;\n                        <Typography\n                            component=\"span\"\n                            variant=\"h1\"\n                            sx={{\n                                fontSize: 'clamp(3rem, 10vw, 4rem)',\n                                color: (theme) =>\n                                    theme.palette.mode === 'light' ? 'primary.main' : 'primary.light',\n                            }}\n                        >\n                            Hub\n                        </Typography>\n                    </Typography>\n                    <Typography\n                        textAlign=\"center\"\n                        color=\"text.secondary\"\n                        sx={{ alignSelf: 'center', width: { sm: '100%', md: '80%' } }}\n                    >\n                        Explore our seamless transaction and delivering high-quality web3 solutions\n                        tailored to your needs. Be part in creating Material Recovery Facility in your Community.\n                    </Typography>\n                    <Stack\n                        direction={{ xs: 'column', sm: 'row' }}\n                        alignSelf=\"center\"\n                        spacing={1}\n                        useFlexGap\n                        sx={{ pt: 2, width: { xs: '100%', sm: 'auto' } }}\n                    >\n                        <TextField\n                            id=\"outlined-basic\"\n                            hiddenLabel\n                            size=\"small\"\n                            variant=\"outlined\"\n                            aria-label=\"Enter your email address\"\n                            placeholder=\"Your email address\"\n                            inputProps={{\n                                autoComplete: 'off',\n                                'aria-label': 'Enter your email address',\n                            }}\n                        />\n                        <Button variant=\"contained\" color=\"primary\">\n                            Start now\n                        </Button>\n                    </Stack>\n                    <Typography variant=\"caption\" textAlign=\"center\" sx={{ opacity: 0.8 }}>\n                        By clicking &quot;Start now&quot; you agree to our&nbsp;\n                        <Link href=\"mailto:waste2earn.io@gmail.com\" color=\"primary\">\n                            Terms & Conditions\n                        </Link>\n                        <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\n                            <DialogTitle>Terms & Conditions Agreement</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    By proceeding, you agree to the Terms & Conditions available at:\n                                    <br />\n                                    <Link href=\"mailto:waste2earn.io@gmail.com\" color=\"primary\">\n                                        waste2earn.io@gmail.com (Terms & Conditions)\n                                    </Link>\n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={() => setOpenDialog(false)}>Disagree</Button>\n                                <Button onClick={handleTermsAgreement}>Agree</Button>\n                            </DialogActions>\n                        </Dialog>\n                    </Typography>\n                </Stack>\n                <Box\n                    id=\"image\"\n                    sx={(theme) => ({\n                        mt: { xs: 8, sm: 10 },\n                        alignSelf: 'center',\n                        height: { xs: 200, sm: 600 },\n                        width: '100%',\n                        backgroundImage:\n                            theme.palette.mode === 'light'\n                                ? 'url(\"/static/images/templates/templates-images/hero-light.png\")'\n                                : 'url(\"/static/images/templates/templates-images/hero-dark.png\")',\n                        backgroundSize: 'cover',\n                        borderRadius: '10px',\n                        outline: '1px solid',\n                        outlineColor:\n                            theme.palette.mode === 'light'\n                                ? alpha('#BFCCD9', 0.5)\n                                : alpha('#9CCCFC', 0.1),\n                        boxShadow:\n                            theme.palette.mode === 'light'\n                                ? `0 0 12px 8px ${alpha('#9CCCFC', 0.2)}`\n                                : `0 0 24px 12px ${alpha('#033363', 0.2)}`,\n                    })}>\n\n                    <ReactPlayer url=\"/w2e-video.mp4\" width=\"100%\" height=\"720\" controls />\n                </Box>\n            </Container>\n        </Box>\n    );\n}","import { useMemo, useState } from \"react\";\nimport { Grid, Box, Typography } from \"@mui/material\";\nimport { NoData, StaticLoading, MainCard } from \"components/index\";\nimport Switch from \"components/switch\";\nimport { Trans } from \"@lingui/macro\";\nimport { STATE } from \"types/staking-farm\";\nimport type { StakingFarmInfo } from \"@w2e/types\";\nimport { useV3StakingFarms, useParsedQueryString } from \"@w2e/hooks\";\nimport { useHistory } from \"react-router-dom\";\nimport StakingPoolItem from \"./components/StakingPoolItem\";\nimport GlobalData from \"./components/GlobalData\";\nimport { Page, Pages } from \"./components/PageToggle\";\nimport FarmContext from \"./context\";\nimport Hero from \"./components/Hero\";\n\nfunction MainContent() {\n  const history = useHistory();\n\n  const [stakeOnly, setStakeOnly] = useState(false);\n\n  const { state } = useParsedQueryString() as { state: STATE };\n  const _state = useMemo(() => state ?? STATE.LIVE, [state]);\n  const { result, loading } = useV3StakingFarms(0, 200, _state);\n  const { content: list } = result ?? { content: [] as StakingFarmInfo[] };\n\n  const handleToggle = (value: Page) => {\n    history.push(value.path);\n  };\n\n  const [unStakedFarms, setUnStakedFarms] = useState<string[]>([]);\n\n  const handleUpdateUnStakedFarms = (unStakedFarms: string) => {\n    setUnStakedFarms((prevState) => prevState.concat(unStakedFarms));\n  };\n\n  const handleDeleteUnStakedFarms = (unStakedFarm: string) => {\n    setUnStakedFarms((prevState) => {\n      const state = [...prevState];\n      const index = prevState.indexOf(unStakedFarm);\n      if (index !== -1) {\n        state.splice(index, 1);\n      }\n      return state;\n    });\n  };\n\n  const handleToggleCheck = (checked: boolean) => {\n    setStakeOnly(checked);\n  };\n\n  return (\n    <FarmContext.Provider\n      value={{\n        unStakedFarms,\n        updateUnStakedFarms: handleUpdateUnStakedFarms,\n        deleteUnStakedFarms: handleDeleteUnStakedFarms,\n      }}\n    >\n      <MainCard>\n        <Grid\n          container\n          direction=\"row\"\n          sx={{\n            padding: \"10px 0 40px\",\n            \"@media (max-width: 960px)\": {\n              padding: \"10px 0px 0px 0px\",\n            },\n          }}\n        >\n          <Grid item>\n            <Box sx={{ display: \"flex\", gap: \"0 20px\" }}>\n              {Pages.map((ele) => (\n                <Typography\n                  key={ele.path}\n                  variant=\"h3\"\n                  color={_state === ele.state ? \"textPrimary\" : \"textTertiary\"}\n                  onClick={() => handleToggle(ele)}\n                  sx={{\n                    cursor: \"pointer\",\n                    textTransform: \"capitalize\",\n                    \"@media (max-width:640px)\": {\n                      fontSize: \"16px\",\n                    },\n                  }}\n                >\n                  {ele.label}\n                </Typography>\n              ))}\n            </Box>\n          </Grid>\n\n          <Grid item style={{ marginLeft: \"auto\" }}>\n            <Grid container alignItems=\"center\" gap=\"0 10px\">\n              <Typography display=\"inline\">\n                <Trans>Staked only</Trans>\n              </Typography>\n              <Switch checked={stakeOnly} onChange={(event: any) => handleToggleCheck(event.target.checked)} />\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Box\n          sx={{\n            position: \"relative\",\n            minHeight: \"440px\",\n          }}\n        >\n          {!loading ? (\n            <Grid container justifyContent=\"center\" sx={{ gap: \"20px\" }}>\n              {list.map((ele) => (\n                <StakingPoolItem key={ele.farmCid} stakeOnly={stakeOnly} state={_state} farm={ele} />\n              ))}\n            </Grid>\n          ) : null}\n          {((unStakedFarms.length === list.length && stakeOnly) || !list.length) && !loading && <NoData />}\n          {loading ? <StaticLoading loading={loading} /> : null}\n        </Box>\n      </MainCard>\n    </FarmContext.Provider>\n  );\n}\n\nexport default function Home() {\n  return (\n    <>\n      <Hero />\n      <GlobalData />\n      <Box sx={{ margin: \"30px 0 0 0\" }}>\n        <MainContent />\n      </Box>\n    </>\n  );\n}\n"],"names":["createContext","useStyle","makeStyles","selectNFTBox","position","nft","width","filter","checked","border","borderRadius","checkbox","ArrowIcon","_jsxs","height","viewBox","fill","xmlns","children","_jsx","clipPath","d","id","DetailsItem","_ref","label","value","Box","sx","display","justifyContent","Typography","color","PositionItem","_ref2","_position$liquidity","positionInfo","selectedPositionId","setSelectedPositionId","poolId","classes","theme","useTheme","show","setShow","useState","usePosition","tickLower","tickUpper","liquidity","pool","token0","token1","token0Amount","amount0","toSignificant","token1Amount","amount1","outOfRange","tickCurrent","closed","toString","pricesFromPosition","getPriceOrderingFromPositionForUI","priceLower","priceUpper","base","useInverter","quote","invert","inverted","equals","undefined","currencyQuote","currencyBase","pairName","useMemo","concat","symbol","_tickAtLimit","useIsTickAtLimit","fee","tickAtLimit","Bound","LOWER","UPPER","token0USDPrice","useUSDPriceById","address","token1USDPrice","totalUSDValue","BigNumber","multipliedBy","toExact","plus","className","_Fragment","gridTemplateColumns","alignItems","cursor","padding","background","palette","level2","onClick","handleToggle","gap","flexDirection","Checkbox","Number","onChange","BigInt","event","stopPropagation","nativeEvent","stopImmediatePropagation","TokenImage","logo","size","tokenId","left","fontWeight","fontSize","formatDollarAmount","PositionRangeState","priceOf","toFormat","formatTickPrice","LoadingRow","UnStakingModal","open","onClose","resetData","farm","userAllPositions","openTip","useTips","confirmLoading","setConfirmLoading","Modal","maxWidth","title","i18n","_","dialogProps","level1","Grid","style","minHeight","maxHeight","overflow","map","index","positionId","length","NoData","mt","Identity","onSubmit","async","identity","status","message","unStake","farmCid","getLocaleMessage","handelUnStakeToken","submit","Button","disabled","variant","fullWidth","type","startIcon","CircularProgress","StakingModal","principal","useAccountPrincipal","swapPoolId","result","allUserPositions","loading","useSwapUserPositions","selectedPosition","ListLoading","mask","approveStatus","approveMessage","approvePosition","ResultStatus","ERROR","collectPositionFee","stake","button","minWidth","lineHeight","mode","colors","darkTextSecondary","lightPrimaryMain","OptionStaking","_userIncentives$numbe","userIncentives","unStakingModal","setUnStakingModal","stakingModal","setStakingModal","state","getFarmsState","container","numberOfStakes","POOL_STATE","LIVE","cardHeader","headerImage","marginTop","marginBottom","marginLeft","collapseContent","margin","borderTop","CountdownBox","startTime","endTime","nowTime","parseInt","String","Date","now","expand","date","Trans","Countdown","FarmPool","_principal$toString","_useToken","_useToken2","_useToken3","_farm$totalReward","_positionIds$length","_userFarmInfo$numberO","_farmMetadata$totalRe","_farmMetadata$totalRe2","_farmMetadata$totalRe3","_farmMetadata$totalRe4","_farmMetadata$secondP","stakeOnly","expanded","setExpanded","React","forceUpdate","setForceUpdate","userFarmInfo","useIntervalUserFarmInfo","AnonymousPrincipal","useFarmUserAllPositions","positionIds","userRewardAmount","useIntervalUserRewardInfo","useToken","poolToken0","poolToken1","rewardToken","poolTVL","userTVL","userRewardUSD","parsedUserRewardAmount","useFarmUSDValue","walletIsConnected","useConnectorStateConnected","updateUnStakedFarms","deleteUnStakedFarms","useContext","FarmContext","useEffect","farmMetadata","useV3FarmMetadata","cycles","useV3StakingCycles","MainCard","level","top","textAlign","darkTextPrimary","primaryMain","STATE","NOT_STARTED","upperFirst","item","flex","CountUp","preserveValue","end","parseTokenAmount","totalReward","totalRewardUnclaimed","decimals","toNumber","duration","separator","direction","prefix","mb","ConnectWallet","CardActions","disableSpacing","paddingTop","handleExpandClick","Collapse","in","timeout","unmountOnExit","CardContent","textDecoration","handleGoToGetPosition","window","ICRocksLoadIcon","secondaryMain","totalRewardClaimed","groupSeparator","secondPerCycle","rewardPerCycle","timestampFormat","component","Link","href","creator","target","shorten","explorerLink","balance","cycleValueFormat","INFO_URL","GlobalBg1","GlobalBg3","itemTitle","paddingBottom","GlobalData","_result$stakeTokenTVL","_result$rewardTokenTV","update","useGetGlobalData","setTimeout","spacing","gridSpacing","xs","md","stakeTokenTVL","rewardTokenTVL","Pages","path","FINISHED","CLOSED","Hero","openDialog","setOpenDialog","backgroundImage","alpha","backgroundSize","backgroundRepeat","Container","pt","sm","pb","Stack","useFlexGap","alignSelf","TextField","hiddenLabel","placeholder","inputProps","autoComplete","opacity","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","handleTermsAgreement","outline","outlineColor","boxShadow","ReactPlayer","url","controls","MainContent","history","useHistory","setStakeOnly","useParsedQueryString","_state","useV3StakingFarms","content","list","unStakedFarms","setUnStakedFarms","Provider","prevState","unStakedFarm","indexOf","splice","ele","push","textTransform","Switch","handleToggleCheck","StakingPoolItem","StaticLoading","Home"],"sourceRoot":""}