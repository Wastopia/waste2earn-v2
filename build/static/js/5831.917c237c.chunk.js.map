{"version":3,"file":"static/js/5831.917c237c.chunk.js","mappings":"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","sources":["components/MaxButton.tsx","components/sns/SelectSNSTokens.tsx","components/sns/Tab.tsx","views/sns/Neurons/components/SplitNeuron.tsx","views/sns/Neurons/components/StopDissolving.tsx","views/sns/Neurons/components/Dissolve.tsx","views/sns/Neurons/components/Stake.tsx","views/sns/Neurons/components/Delay.tsx","views/sns/Neurons/components/Disburse.tsx","../packages/ui/src/components/Grid/Flex.tsx","views/sns/Neurons/components/DisburseMaturity.tsx","../packages/ui/src/components/Input/Progression.tsx","views/sns/Neurons/components/StakeMaturity.tsx","views/sns/Neurons/components/Maturity.tsx","views/sns/Neurons/components/AddFollowee.tsx","views/sns/Neurons/components/DeleteFollowee.tsx","views/sns/Neurons/components/Following.tsx","views/sns/Neurons/components/HotKeys.tsx","views/sns/Neurons/components/StakeToCreateNeuron.tsx","views/sns/Neurons/index.tsx","../packages/utils/src/time.ts"],"sourcesContent":["import { Typography, TypographyProps } from \"@mui/material\";\nimport { useTheme } from \"@mui/styles\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Trans } from \"@lingui/macro\";\n\nexport default function MaxButton(props: TypographyProps) {\n  const theme = useTheme() as Theme;\n\n  return (\n    <Typography\n      {...props}\n      sx={{\n        padding: \"1px 3px\",\n        cursor: \"pointer\",\n        borderRadius: \"2px\",\n        backgroundColor: theme.colors.secondaryMain,\n        color: \"#ffffff\",\n        fontSize: \"12px\",\n        ...(props.sx ?? {}),\n      }}\n    >\n      <Trans>Max</Trans>\n    </Typography>\n  );\n}\n","import { useMemo } from \"react\";\nimport { Select, AvatarImage } from \"components/index\";\nimport { Box, Typography } from \"@mui/material\";\nimport { useFetchSnsAllTokensInfo } from \"store/sns/hooks\";\nimport { SnsSwapLifecycle } from \"@w2e/constants\";\n\nexport interface SelectSnsProps {\n  onChange: (value: string) => void;\n  value: string | null;\n}\n\nexport function SelectSns({ onChange, value }: SelectSnsProps) {\n  const { result: snsAllTokensInfo } = useFetchSnsAllTokensInfo();\n\n  const completedSns = useMemo(() => {\n    if (!snsAllTokensInfo) return undefined;\n    return snsAllTokensInfo.filter((e) => e.lifecycle.lifecycle === SnsSwapLifecycle.Committed);\n  }, [snsAllTokensInfo]);\n\n  const menus = useMemo(() => {\n    if (!completedSns) return [];\n    return completedSns?.map((e) => ({\n      value: e.canister_ids.root_canister_id,\n      label: (\n        <Box sx={{ display: \"flex\", gap: \"0 8px\", alignItems: \"center\" }}>\n          <AvatarImage src={e.meta.logo} sx={{ width: \"24px\", height: \"24px\" }} />\n          <Typography fontWeight={500}>{e.meta.name}</Typography>\n        </Box>\n      ),\n    }));\n  }, [completedSns]);\n\n  const handleSelectChange = (value: string) => {\n    onChange(value);\n  };\n\n  return (\n    <Box\n      sx={{\n        width: \"420px\",\n        \"@media(max-width: 640px)\": {\n          width: \"100%\",\n        },\n      }}\n    >\n      <Select value={value} menus={menus} onChange={handleSelectChange} />\n    </Box>\n  );\n}\n","import { TabPanel } from \"components/index\";\n\nexport function Tabs() {\n  const tabs = [\n    { key: \"neurons\", value: \"Neurons\", path: \"/sns/neurons\" },\n    { key: \"voting\", value: \"Voting\", path: \"/sns/voting\" },\n    { key: \"launches\", value: \"Launchpad\", path: \"/sns/launches\" },\n  ];\n\n  return <TabPanel tabs={tabs} />;\n}\n","import React, { useMemo, useState } from \"react\";\nimport { Button, Grid, Typography, Box, InputAdornment } from \"@mui/material\";\nimport { parseTokenAmount, formatTokenAmount, uint8ArrayToBigInt } from \"@w2e/utils\";\nimport { splitNeuron } from \"@w2e/hooks\";\nimport BigNumber from \"bignumber.js\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport type { NervousSystemParameters } from \"@w2e/types\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { TokenInfo } from \"types/token\";\nimport { Modal, NumberFilledTextField } from \"components/index\";\nimport MaxButton from \"components/MaxButton\";\nimport randomBytes from \"randombytes\";\n\nexport interface SplitNeuronProps {\n  open: boolean;\n  onClose: () => void;\n  onSplitSuccess?: () => void;\n  token: TokenInfo | undefined;\n  neuron_stake: bigint;\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  neuronSystemParameters: NervousSystemParameters | undefined;\n  disabled?: boolean;\n}\n\nexport function SplitNeuron({\n  onSplitSuccess,\n  neuron_stake,\n  token,\n  governance_id,\n  neuron_id,\n  neuronSystemParameters,\n  disabled,\n}: SplitNeuronProps) {\n  const [open, setOpen] = useState(false);\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [amount, setAmount] = useState<string | undefined>(undefined);\n\n  const neuron_minimum_stake = useMemo(() => {\n    if (!neuronSystemParameters) return undefined;\n\n    return neuronSystemParameters.neuron_minimum_stake_e8s[0];\n  }, [neuronSystemParameters]);\n\n  const handleSubmit = async () => {\n    if (loading || !amount || !token || !governance_id || !neuron_id) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    const nonceBytes = new Uint8Array(randomBytes(8));\n    const memo = uint8ArrayToBigInt(nonceBytes);\n\n    const { data, message, status } = await splitNeuron(\n      governance_id,\n      neuron_id,\n      BigInt(formatTokenAmount(amount, token.decimals).toString()),\n      memo,\n    );\n\n    const result = data ? data.command[0] : undefined;\n    const split_neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!split_neuron_error) {\n        openTip(t`Split successfully`, TIP_SUCCESS);\n        if (onSplitSuccess) onSplitSuccess();\n      } else {\n        const message = split_neuron_error.error_message;\n        openTip(message !== \"\" ? message : t`Failed to split`, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to split`, TIP_ERROR);\n    }\n\n    setLoading(false);\n    closeFullscreenLoading();\n  };\n\n  const handleMax = (event: React.MouseEvent<HTMLParagraphElement>) => {\n    event.stopPropagation();\n\n    if (!token || !neuron_minimum_stake) return;\n\n    setAmount(\n      parseTokenAmount(\n        new BigNumber(neuron_stake.toString()).minus(neuron_minimum_stake.toString()).minus(token.transFee.toString()),\n        token.decimals,\n      ).toString(),\n    );\n  };\n\n  let error: string | undefined;\n\n  if (amount === undefined) error = t`Enter the amount`;\n  if (token === undefined) error = t`Some unknown error happened`;\n\n  if (\n    amount &&\n    token &&\n    neuron_minimum_stake &&\n    new BigNumber(amount)\n      .plus(parseTokenAmount(neuron_minimum_stake + token.transFee, token.decimals))\n      .isGreaterThan(parseTokenAmount(neuron_stake, token.decimals))\n  )\n    error = t`Amount is too large`;\n  if (\n    amount &&\n    token &&\n    !new BigNumber(amount).minus(parseTokenAmount(token.transFee, token.decimals)).isGreaterThan(0)\n  )\n    error = t`Must be greater than trans fee`;\n\n  if (\n    amount &&\n    token &&\n    neuron_minimum_stake &&\n    !formatTokenAmount(amount, token.decimals)\n      .minus(token.transFee.toString())\n      .isGreaterThan(neuron_minimum_stake?.toString())\n  )\n    error = t`Amount must be greater than ${parseTokenAmount(\n      neuron_minimum_stake + token.transFee,\n      token.decimals,\n    ).toFormat()} ${token.symbol}`;\n\n  const canSplit = useMemo(() => {\n    const neuron_minimum_stake_e8s = neuronSystemParameters?.neuron_minimum_stake_e8s[0];\n\n    if (!neuron_minimum_stake_e8s) return false;\n\n    return new BigNumber(neuron_stake.toString()).isGreaterThan((neuron_minimum_stake_e8s * BigInt(2)).toString());\n  }, [neuron_stake, neuronSystemParameters]);\n\n  return (\n    <>\n      <Button onClick={() => setOpen(true)} variant=\"contained\" size=\"small\" disabled={!canSplit || disabled}>\n        <Trans>Split Neuron</Trans>\n      </Button>\n\n      <Modal open={open} onClose={() => setOpen(false)} title={t`Split Neuron`}>\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"24px 0\" }}>\n          <NumberFilledTextField\n            placeholder={t`Enter the amount`}\n            value={amount}\n            onChange={(value: string) => setAmount(value)}\n            fullWidth\n            numericProps={{\n              allowNegative: false,\n              decimalScale: token?.decimals,\n            }}\n            autoComplete=\"off\"\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <MaxButton onClick={handleMax} />\n                </InputAdornment>\n              ),\n            }}\n          />\n\n          <Grid container alignItems=\"center\">\n            <Typography>\n              {token ? (\n                <Trans>\n                  Balance:{\" \"}\n                  {`${new BigNumber(\n                    parseTokenAmount(neuron_stake, token.decimals).toFixed(token.decimals > 8 ? 8 : token.decimals),\n                  ).toFormat()}`}\n                </Trans>\n              ) : (\n                \"--\"\n              )}\n            </Typography>\n          </Grid>\n          <Typography>\n            {token ? (\n              <>\n                <Trans>Fee:</Trans>\n                {parseTokenAmount(token.transFee.toString(), token.decimals).toFormat()}&nbsp;\n                {token.symbol}\n              </>\n            ) : (\n              \"--\"\n            )}\n          </Typography>\n\n          <Button\n            variant=\"contained\"\n            fullWidth\n            size=\"large\"\n            disabled={loading || !!error}\n            onClick={handleSubmit}\n            startIcon={loading ? <CircularProgress size={26} color=\"inherit\" /> : null}\n          >\n            {error || <Trans>Confirm</Trans>}\n          </Button>\n        </Box>\n      </Modal>\n    </>\n  );\n}\n","import { useState } from \"react\";\nimport { Button } from \"@mui/material\";\nimport { stopDissolvingNeuron } from \"@w2e/hooks\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { ConfirmModal } from \"@w2e/ui\";\n\nexport interface StopDissolvingProps {\n  onStopSuccess?: () => void;\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  disabled?: boolean;\n}\n\nexport function StopDissolving({ onStopSuccess, governance_id, neuron_id, disabled }: StopDissolvingProps) {\n  const [open, setOpen] = useState(false);\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const handleConfirm = async () => {\n    if (loading || !governance_id || !neuron_id) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    const { data, message, status } = await stopDissolvingNeuron(governance_id, neuron_id);\n\n    const result = data ? data.command[0] : undefined;\n    const stop_dissolving_neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!stop_dissolving_neuron_error) {\n        openTip(t`Stop dissolving successfully`, TIP_SUCCESS);\n        if (onStopSuccess) onStopSuccess();\n      } else {\n        const message = stop_dissolving_neuron_error.error_message;\n        openTip(message === \"\" ? t`Failed to stop dissolving` : message, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to stop dissolving`, TIP_ERROR);\n    }\n\n    setLoading(false);\n    closeFullscreenLoading();\n  };\n\n  return (\n    <>\n      <Button onClick={() => setOpen(true)} variant=\"contained\" size=\"small\" disabled={disabled}>\n        <Trans>Stop Dissolving</Trans>\n      </Button>\n\n      <ConfirmModal\n        open={open}\n        onClose={() => setOpen(false)}\n        title={t`Stop Dissolving`}\n        onConfirm={handleConfirm}\n        text={t`Are you sure you want to stop the dissolve process?`}\n      />\n    </>\n  );\n}\n","import { useState } from \"react\";\nimport { Button } from \"@mui/material\";\nimport { dissolveNeuron } from \"@w2e/hooks\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { ConfirmModal } from \"@w2e/ui\";\n\nexport interface DissolveProps {\n  onDissolveSuccess?: () => void;\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  disabled?: boolean;\n}\n\nexport function Dissolve({ onDissolveSuccess, governance_id, neuron_id, disabled }: DissolveProps) {\n  const [open, setOpen] = useState(false);\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const handleConfirm = async () => {\n    if (loading || !governance_id || !neuron_id) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    const { data, message, status } = await dissolveNeuron(governance_id, neuron_id);\n\n    const result = data ? data.command[0] : undefined;\n    const stop_dissolving_neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!stop_dissolving_neuron_error) {\n        openTip(t`Dissolve successfully`, TIP_SUCCESS);\n        if (onDissolveSuccess) onDissolveSuccess();\n      } else {\n        const message = stop_dissolving_neuron_error.error_message;\n        openTip(message !== \"\" ? message : t`Failed to dissolve`, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to dissolve`, TIP_ERROR);\n    }\n\n    setLoading(false);\n    closeFullscreenLoading();\n  };\n\n  return (\n    <>\n      <Button onClick={() => setOpen(true)} variant=\"contained\" size=\"small\" disabled={disabled}>\n        <Trans>Dissolve</Trans>\n      </Button>\n\n      <ConfirmModal\n        open={open}\n        onClose={() => setOpen(false)}\n        title={t`Dissolve`}\n        onConfirm={handleConfirm}\n        text={t`This will cause your neuron to lose its age bonus. Are you sure you wish to continue?`}\n      />\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Button, Grid, Typography, Box, InputAdornment } from \"@mui/material\";\nimport { parseTokenAmount, formatTokenAmount } from \"@w2e/utils\";\nimport { claimOrRefreshNeuron } from \"@w2e/hooks\";\nimport { tokenTransfer } from \"hooks/token/calls\";\nimport BigNumber from \"bignumber.js\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { TokenInfo } from \"types/token\";\nimport { Modal, NumberFilledTextField } from \"components/index\";\nimport MaxButton from \"components/MaxButton\";\nimport { useTokenBalance } from \"hooks/token\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\n\nexport interface StakeProps {\n  open: boolean;\n  onClose: () => void;\n  onStakeSuccess?: () => void;\n  token: TokenInfo | undefined;\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  disabled?: boolean;\n}\n\nexport function Stake({ onStakeSuccess, token, governance_id, neuron_id, disabled }: StakeProps) {\n  const principal = useAccountPrincipal();\n  const [open, setOpen] = useState(false);\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [amount, setAmount] = useState<string | undefined>(undefined);\n\n  const { result: balance } = useTokenBalance(token?.canisterId, principal);\n\n  const handleSubmit = async () => {\n    if (loading || !amount || !principal || !token || !governance_id || !neuron_id) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    const { message, status } = await tokenTransfer({\n      canisterId: token.canisterId,\n      to: governance_id,\n      subaccount: [...neuron_id],\n      amount: formatTokenAmount(amount, token.decimals),\n      from: principal.toString(),\n    });\n\n    if (status === \"ok\") {\n      await claimOrRefreshNeuron(governance_id, neuron_id);\n      openTip(t`Staked successfully`, TIP_SUCCESS);\n      if (onStakeSuccess) onStakeSuccess();\n    } else {\n      openTip(message ?? t`Failed to stake`, TIP_ERROR);\n    }\n\n    setLoading(false);\n    closeFullscreenLoading();\n  };\n\n  const handleMax = (event: React.MouseEvent<HTMLParagraphElement>) => {\n    event.stopPropagation();\n    if (!token || !balance) return;\n    setAmount(parseTokenAmount(balance.minus(token.transFee.toString()), token.decimals).toString());\n  };\n\n  let error: string | undefined;\n  if (amount === undefined) error = t`Enter the amount`;\n  if (token === undefined) error = t`Some unknown error happened`;\n  if (\n    amount &&\n    token &&\n    balance &&\n    parseTokenAmount(balance.minus(token.transFee.toString()), token.decimals).isLessThan(amount)\n  )\n    error = t`There are not enough funds in this account`;\n\n  return (\n    <>\n      <Button onClick={() => setOpen(true)} variant=\"contained\" size=\"small\" disabled={disabled}>\n        <Trans>Stake</Trans>\n      </Button>\n\n      <Modal open={open} onClose={() => setOpen(false)} title={t`Increase Neuron Stake`}>\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"24px 0\" }}>\n          <NumberFilledTextField\n            placeholder={t`Enter the amount`}\n            value={amount}\n            onChange={(value: string) => setAmount(value)}\n            fullWidth\n            numericProps={{\n              allowNegative: false,\n              decimalScale: token?.decimals,\n            }}\n            autoComplete=\"off\"\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <MaxButton onClick={handleMax} />\n                </InputAdornment>\n              ),\n            }}\n          />\n\n          <Grid container alignItems=\"center\">\n            <Typography>\n              {token && balance ? (\n                <Trans>\n                  Balance:&nbsp;\n                  {`${new BigNumber(\n                    parseTokenAmount(balance, token.decimals).toFixed(token.decimals > 8 ? 8 : token.decimals),\n                  ).toFormat()}`}\n                </Trans>\n              ) : (\n                \"--\"\n              )}\n            </Typography>\n          </Grid>\n          <Typography>\n            {token ? (\n              <>\n                <Trans>Fee:</Trans>&nbsp;\n                {parseTokenAmount(token.transFee.toString(), token.decimals).toFormat()}&nbsp;\n                {token.symbol}\n              </>\n            ) : (\n              \"--\"\n            )}\n          </Typography>\n\n          <Button\n            variant=\"contained\"\n            fullWidth\n            size=\"large\"\n            disabled={loading || error !== undefined}\n            onClick={handleSubmit}\n            startIcon={loading ? <CircularProgress size={26} color=\"inherit\" /> : null}\n          >\n            {error || <Trans>Confirm</Trans>}\n          </Button>\n        </Box>\n      </Modal>\n    </>\n  );\n}\n","import { useMemo, useState } from \"react\";\nimport { Button, Typography, Box, useTheme } from \"@mui/material\";\nimport {\n  parseTokenAmount,\n  toHexString,\n  toSignificantWithGroupSeparator,\n  secondsToDays,\n  daysToSeconds,\n} from \"@w2e/utils\";\nimport { increaseNeuronDelay } from \"@w2e/hooks\";\nimport BigNumber from \"bignumber.js\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport type { NervousSystemParameters, Neuron } from \"@w2e/types\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { TokenInfo } from \"types/token\";\nimport { Modal, NumberFilledTextField } from \"components/index\";\nimport { secondsToDissolveDelayDuration, getSnsDelayTimeInSeconds, neuronFormat } from \"utils/sns/index\";\nimport { MaxButton, MinButton } from \"components/Button\";\nimport { Theme } from \"@mui/material/styles\";\n\nexport interface SetDissolveDelayProps {\n  open: boolean;\n  onClose: () => void;\n  onSetSuccess?: () => void;\n  token: TokenInfo | undefined;\n  neuron_stake: bigint;\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  neuronSystemParameters: NervousSystemParameters | undefined;\n  neuron: Neuron | undefined;\n  disabled?: boolean;\n}\n\nexport function SetDissolveDelay({\n  onSetSuccess,\n  neuron_stake,\n  token,\n  governance_id,\n  neuron_id,\n  neuronSystemParameters,\n  neuron,\n  disabled,\n}: SetDissolveDelayProps) {\n  const theme = useTheme() as Theme;\n  const [open, setOpen] = useState(false);\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [day, setDay] = useState<string | undefined>(undefined);\n\n  const {\n    neuron_minimum_dissolve_seconds,\n    neuron_max_dissolve_seconds,\n    neuron_max_dissolve_delay_bonus_percentage,\n    aging_since_timestamp_seconds,\n    neuron_max_age_bonus,\n    neuron_max_age_percentage,\n    staked_maturity_e8s_equivalent,\n  } = useMemo(() => {\n    if (!neuronSystemParameters || !neuron) return {};\n\n    const formatted_neuron = neuronFormat(neuron);\n\n    return {\n      neuron_minimum_stake: neuronSystemParameters.neuron_minimum_stake_e8s[0],\n      neuron_minimum_dissolve_seconds: neuronSystemParameters.neuron_minimum_dissolve_delay_to_vote_seconds[0],\n      neuron_max_dissolve_seconds: neuronSystemParameters.max_dissolve_delay_seconds[0],\n      neuron_max_dissolve_delay_bonus_percentage: neuronSystemParameters.max_dissolve_delay_bonus_percentage[0],\n      neuron_max_age_bonus: neuronSystemParameters.max_neuron_age_for_age_bonus[0],\n      neuron_max_age_percentage: neuronSystemParameters.max_age_bonus_percentage[0],\n\n      aging_since_timestamp_seconds: neuron.aging_since_timestamp_seconds,\n      staked_maturity_e8s_equivalent: neuron.staked_maturity_e8s_equivalent[0] || BigInt(0),\n      dissolveDelay: formatted_neuron.dissolve_delay,\n      whenDissolvedSeconds: formatted_neuron.when_dissolved_timestamp_seconds,\n    };\n  }, [neuronSystemParameters]);\n\n  const currentDissolveDelaySeconds = useMemo(() => {\n    if (!neuron) return undefined;\n    return getSnsDelayTimeInSeconds(neuron) ?? 0n;\n  }, [neuron]);\n\n  const handleSubmit = async () => {\n    if (loading || !day || !token || !governance_id || !neuron_id || currentDissolveDelaySeconds === undefined) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    const { data, message, status } = await increaseNeuronDelay(\n      governance_id,\n      neuron_id,\n      BigInt(daysToSeconds(Number(day))) - currentDissolveDelaySeconds,\n    );\n\n    const result = data ? data.command[0] : undefined;\n    const manage_neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!manage_neuron_error) {\n        openTip(t`Set dissolve delay successfully`, TIP_SUCCESS);\n        if (onSetSuccess) onSetSuccess();\n      } else {\n        openTip(manage_neuron_error.error_message, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to set dissolve delay`, TIP_ERROR);\n    }\n\n    setLoading(false);\n    closeFullscreenLoading();\n  };\n\n  const handleMax = () => {\n    if (!neuron_max_dissolve_seconds) return;\n    setDay(secondsToDays(Number(neuron_max_dissolve_seconds)).toString());\n  };\n\n  const handleMin = () => {\n    if (!neuron) return;\n    const day = secondsToDays(Math.max(Number(neuron_minimum_dissolve_seconds), Number(currentDissolveDelaySeconds)));\n    setDay((day + 1).toString());\n  };\n\n  const votingPower = useMemo(() => {\n    if (\n      token === undefined ||\n      day === undefined ||\n      !neuron ||\n      !neuronSystemParameters ||\n      !neuron_minimum_dissolve_seconds ||\n      !neuron_max_dissolve_seconds ||\n      !neuron_max_dissolve_delay_bonus_percentage ||\n      neuron_max_age_bonus === undefined ||\n      neuron_max_age_percentage === undefined\n    )\n      return undefined;\n\n    const newDelayInSeconds = daysToSeconds(Number(day));\n\n    if (newDelayInSeconds === 0 || new BigNumber(newDelayInSeconds).lt(neuron_minimum_dissolve_seconds.toString())) {\n      return 0;\n    }\n\n    const dissolveDelayBonus = new BigNumber(newDelayInSeconds)\n      .div(neuron_max_dissolve_seconds.toString())\n      .times(neuron_max_dissolve_delay_bonus_percentage.toString())\n      .div(100)\n      .plus(1);\n\n    const now = Math.ceil(new Date().getTime() / 1000);\n\n    let aging = BigInt(parseInt(new BigNumber(now).minus(aging_since_timestamp_seconds.toString()).toString()));\n\n    const dissolveState = neuron.dissolve_state[0];\n\n    if (dissolveState) {\n      const type = Object.keys(dissolveState)[0];\n      if (type === \"WhenDissolvedTimestampSeconds\") {\n        aging = BigInt(0);\n      }\n    }\n\n    const ageBonus = new BigNumber(aging.toString())\n      .div(neuron_max_age_bonus.toString())\n      .times(neuron_max_age_percentage.toString())\n      .div(100)\n      .plus(1);\n\n    const balance = new BigNumber(neuron_stake.toString(10))\n      .plus(staked_maturity_e8s_equivalent.toString(10))\n      .div(10 ** token.decimals)\n      .toString(10);\n\n    return new BigNumber(balance).times(dissolveDelayBonus).times(ageBonus).decimalPlaces(2, 1).toString(10);\n  }, [\n    day,\n    token,\n    staked_maturity_e8s_equivalent,\n    neuronSystemParameters,\n    neuron,\n    neuron_minimum_dissolve_seconds,\n    neuron_max_dissolve_delay_bonus_percentage,\n    neuron_max_age_bonus,\n    neuron_max_age_percentage,\n    aging_since_timestamp_seconds,\n  ]);\n\n  const votingPowerPercentage = useMemo(() => {\n    if (neuron_max_dissolve_seconds === undefined || day === undefined) return undefined;\n\n    const maxDelay = Number(neuron_max_dissolve_seconds);\n\n    const val = (daysToSeconds(Number(day)) / maxDelay) * 100;\n\n    return val > 100 ? \"100%\" : `${val.toFixed(2)}%`;\n  }, [day, neuron_max_dissolve_seconds]);\n\n  let error: string | undefined;\n\n  if (!day) error = t`Enter the dissolve delay`;\n\n  if (token === undefined) error = t`Some unknown error happened`;\n  if (day && Number(day) === 0) error = t`The new dissolve delay must be greater than the current value`;\n  if (\n    day &&\n    currentDissolveDelaySeconds &&\n    new BigNumber(daysToSeconds(Number(day))).isLessThan(currentDissolveDelaySeconds.toString())\n  )\n    error = t`Can't set a smaller delay than the current dissolve delay.`;\n  if (\n    day &&\n    neuron_max_dissolve_seconds &&\n    new BigNumber(daysToSeconds(Number(day))).isGreaterThan(neuron_max_dissolve_seconds.toString())\n  )\n    error = t`Dissolve delay exceeds the maximum allowed delay`;\n\n  return (\n    <>\n      <Button onClick={() => setOpen(true)} variant=\"contained\" size=\"small\" disabled={disabled}>\n        <Trans>Delay</Trans>\n      </Button>\n\n      <Modal open={open} onClose={() => setOpen(false)} title={t`Set Dissolve Delay`}>\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"12px 0\" }}>\n          <Box>\n            <Typography color=\"text.primary\">Neuron ID</Typography>\n            <Typography sx={{ fontSize: \"12px\", padding: \"5px\" }}>\n              {neuron_id ? toHexString(neuron_id) : \"--\"}\n            </Typography>\n          </Box>\n\n          <Box>\n            <Typography color=\"text.primary\">Balance</Typography>\n            <Typography sx={{ fontSize: \"12px\", padding: \"5px\" }}>\n              {neuron_stake && token\n                ? toSignificantWithGroupSeparator(parseTokenAmount(neuron_stake, token.decimals).toString(), 6)\n                : \"--\"}\n            </Typography>\n          </Box>\n\n          <Box>\n            <Typography color=\"text.primary\">\n              <Trans>Dissolve Delay</Trans>\n            </Typography>\n            <Typography sx={{ padding: \"5px\", fontSize: \"12px\" }}>\n              <Trans>\n                Dissolve delay is the minimum amount of time you have to wait for the neuron to unlock, and ICS to be\n                available again. Note, that dissolve delay only decreases when the neuron is in a dissolving state.\n                Voting power is given to neurons with a dissolve delay of at least&nbsp;\n                {neuron_minimum_dissolve_seconds\n                  ? secondsToDissolveDelayDuration(neuron_minimum_dissolve_seconds)\n                  : \"--\"}\n                .\n              </Trans>\n            </Typography>\n          </Box>\n\n          <Typography color=\"text.primary\">\n            <Trans>Dissolve Delay (in days)</Trans>\n          </Typography>\n\n          <Box sx={{ padding: \"5px\" }}>\n            <Box sx={{ display: \"flex\", justifyContent: \"space-between\", padding: \"0 5px 5px 0\" }}>\n              <MinButton onClick={handleMin} />\n              <MaxButton onClick={handleMax} />\n            </Box>\n\n            <NumberFilledTextField\n              placeholder={t`Enter the dissolve delay`}\n              value={day}\n              onChange={(value: string) => setDay(value)}\n              fullWidth\n              numericProps={{\n                allowNegative: false,\n                decimalScale: 8,\n              }}\n              autoComplete=\"off\"\n            />\n          </Box>\n\n          {day &&\n            neuron_minimum_dissolve_seconds &&\n            new BigNumber(day).isLessThan(secondsToDays(Number(neuron_minimum_dissolve_seconds))) ? (\n            <Box>\n              <Typography sx={{ color: theme.palette.warning.dark }}>\n                <Trans>The neuron will not have voting power unless the dissolve delay is increased.</Trans>\n              </Typography>\n            </Box>\n          ) : null}\n\n          <Box sx={{ padding: \"0 5px\" }}>\n            <Box\n              sx={{\n                width: \"100%\",\n                height: \"8px\",\n                borderRadius: \"8px\",\n                display: \"flex\",\n                background: theme.palette.background.level1,\n              }}\n            >\n              <Box\n                sx={{\n                  borderRadius: \"8px\",\n                  background: theme.colors.secondaryMain,\n                  width: votingPowerPercentage,\n                  height: \"100%\",\n                }}\n              />\n            </Box>\n\n            <Box sx={{ display: \"flex\", justifyContent: \"space-around\", margin: \"12px 0 0 0\" }}>\n              <Box>\n                <Typography>{votingPower}</Typography>\n                <Typography>\n                  <Trans>Voting Power</Trans>\n                </Typography>\n              </Box>\n              <Box>\n                <Typography>{day}</Typography>\n                <Typography>\n                  <Trans>Dissolve Delay</Trans>\n                </Typography>\n              </Box>\n            </Box>\n          </Box>\n\n          <Button\n            variant=\"contained\"\n            fullWidth\n            size=\"large\"\n            disabled={loading || !!error}\n            onClick={handleSubmit}\n            startIcon={loading ? <CircularProgress size={26} color=\"inherit\" /> : null}\n          >\n            {error || <Trans>Confirm</Trans>}\n          </Button>\n        </Box>\n      </Modal>\n    </>\n  );\n}\n","import { useState } from \"react\";\nimport { Button } from \"@mui/material\";\nimport { disburseNeuron } from \"@w2e/hooks\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { ConfirmModal } from \"@w2e/ui\";\n\nexport interface DisburseProps {\n  onDisburseSuccess?: () => void;\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  disabled?: boolean;\n}\n\nexport function Disburse({ onDisburseSuccess, governance_id, neuron_id, disabled }: DisburseProps) {\n  const [open, setOpen] = useState(false);\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const handleConfirm = async () => {\n    if (loading || !governance_id || !neuron_id) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    const { data, message, status } = await disburseNeuron(governance_id, neuron_id);\n\n    const result = data ? data.command[0] : undefined;\n    const stop_dissolving_neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!stop_dissolving_neuron_error) {\n        openTip(t`Disburse successfully`, TIP_SUCCESS);\n        if (onDisburseSuccess) onDisburseSuccess();\n      } else {\n        const message = stop_dissolving_neuron_error.error_message;\n        openTip(message === \"\" ? t`Failed to disburse` : message, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to disburse`, TIP_ERROR);\n    }\n\n    setLoading(false);\n    closeFullscreenLoading();\n  };\n\n  return (\n    <>\n      <Button onClick={() => setOpen(true)} variant=\"contained\" size=\"small\" disabled={disabled}>\n        <Trans>Disburse</Trans>\n      </Button>\n\n      <ConfirmModal\n        open={open}\n        onClose={() => setOpen(false)}\n        title={t`Disburse`}\n        onConfirm={handleConfirm}\n        text={t`Are you sure you want to disburse this neuron?`}\n      />\n    </>\n  );\n}\n","import { Box, BoxProps } from \"@mui/material\";\nimport { ReactNode } from \"react\";\n\nexport interface FlexProps {\n  width?: string;\n  align?: BoxProps[\"alignItems\"];\n  justify?: BoxProps[\"justifyContent\"];\n  padding?: string;\n  border?: string;\n  borderRadius?: string;\n  children: ReactNode;\n  margin?: string;\n  gap?: BoxProps[\"gap\"];\n  vertical?: boolean;\n}\n\nexport function Flex({\n  vertical,\n  gap,\n  children,\n  width,\n  align,\n  justify,\n  padding,\n  border,\n  borderRadius,\n  margin,\n}: FlexProps) {\n  return (\n    <Box\n      sx={{\n        flexDirection: vertical ? \"column\" : \"row\",\n        gridAutoRows: \"auto\",\n        display: \"flex\",\n        width: width ?? \"auto\",\n        alignItems: align ?? \"center\",\n        justifyContent: justify ?? \"flex-start\",\n        padding: padding ?? 0,\n        border,\n        borderRadius,\n        margin: margin ?? 0,\n        gap,\n      }}\n    >\n      {children}\n    </Box>\n  );\n}\n","import { Button } from \"@mui/material\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { disburseNeuronMaturity } from \"@w2e/hooks\";\nimport { ConfirmModal } from \"@w2e/ui\";\nimport { Neuron } from \"@w2e/types\";\nimport { useMemo, useState } from \"react\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\n\nexport interface DisburseMaturityProps {\n  neuron: Neuron;\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  onDisburseMaturitySuccess?: () => void;\n  disabled?: boolean;\n}\n\nexport function DisburseMaturity({\n  neuron,\n  governance_id,\n  neuron_id,\n  onDisburseMaturitySuccess,\n  disabled,\n}: DisburseMaturityProps) {\n  const [disburseOpen, setDisburseOpen] = useState(false);\n\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { available_maturity } = useMemo(() => {\n    return {\n      auto_stake_maturity: neuron.auto_stake_maturity[0],\n      staked_maturity: neuron.staked_maturity_e8s_equivalent[0],\n      available_maturity: neuron.maturity_e8s_equivalent,\n    };\n  }, [neuron]);\n\n  const handleDisburseMaturity = async () => {\n    if (loading || !governance_id || !neuron_id) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    const { data, message, status } = await disburseNeuronMaturity(governance_id, neuron_id);\n\n    const result = data ? data.command[0] : undefined;\n    const neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!neuron_error) {\n        openTip(t`Disburse maturity successfully`, TIP_SUCCESS);\n        setDisburseOpen(false);\n        if (onDisburseMaturitySuccess) onDisburseMaturitySuccess();\n      } else {\n        const message = neuron_error.error_message;\n        openTip(message === \"\" ? t`Failed to disburse maturity` : message, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to disburse maturity`, TIP_ERROR);\n    }\n\n    setLoading(false);\n    closeFullscreenLoading();\n  };\n\n  return (\n    <>\n      <Button\n        onClick={() => setDisburseOpen(true)}\n        variant=\"contained\"\n        size=\"small\"\n        disabled={available_maturity.toString() === \"0\" || disabled}\n      >\n        <Trans>Disburse</Trans>\n      </Button>\n\n      <ConfirmModal\n        open={disburseOpen}\n        onClose={() => setDisburseOpen(false)}\n        title={t`Disburse Maturity`}\n        onConfirm={handleDisburseMaturity}\n        text={t`Are you sure you want to disburse this neuron?`}\n      />\n    </>\n  );\n}\n","import { Slider, Tooltip, tooltipClasses, SliderProps } from \"@mui/material\";\nimport { styled, makeStyles } from \"@mui/styles\";\nimport { Theme } from \"@mui/material/styles\";\n\nconst marks = [{ value: 0 }, { value: 25 }, { value: 50 }, { value: 75 }, { value: 100 }];\n\nconst useStyle = makeStyles((theme: Theme) => {\n  return {\n    root: {\n      color: theme.colors.secondaryMain,\n      \"& .MuiSlider-rail\": {\n        height: \"4px\",\n        backgroundColor: theme.palette.background.level4,\n      },\n      \"& .MuiSlider-thumb\": {\n        width: \"16px\",\n        height: \"16px\",\n        border: \"2px solid #fff\",\n        marginLeft: \"5px\",\n      },\n      \"& .MuiSlider-mark\": {\n        width: \"12px\",\n        height: \"12px\",\n        borderRadius: \"50%\",\n        backgroundColor: theme.palette.background.level4,\n        top: \"50%\",\n        transform: \"translate(0, -50%)\",\n        opacity: 1,\n        \"&.MuiSlider-markActive\": {\n          backgroundColor: theme.colors.secondaryMain,\n        },\n      },\n    },\n    tooltip: {},\n  };\n});\n\nconst LightTooltip = styled(({ className, ...props }) => <Tooltip {...props} classes={{ popper: className }} />)(\n  ({ theme }: { theme: Theme }) => ({\n    [`& .${tooltipClasses.tooltip}`]: {\n      backgroundColor: theme.colors.secondaryMain,\n      color: \"#fff\",\n      fontWeight: 700,\n    },\n    \"& .MuiTooltip-arrow\": {\n      color: theme.colors.secondaryMain,\n    },\n  }),\n);\n\nconst ValueLabelComponent = (props: { children: React.ReactChild; value: string | number }) => {\n  const { children, value } = props;\n  const classes = useStyle();\n\n  return (\n    <LightTooltip placement=\"top\" arrow title={`${value}%`} className={classes.tooltip}>\n      {children}\n    </LightTooltip>\n  );\n};\n\nexport interface ProgressionProps {\n  value: number | undefined;\n  onChange: (value: number) => void;\n}\n\nexport function Progression({ value, onChange }: ProgressionProps) {\n  const classes = useStyle();\n\n  const handleSliderChange = (event, value: number | number[]) => {\n    if (typeof value === \"number\") {\n      onChange(value);\n    } else {\n      onChange(value[0]);\n    }\n  };\n\n  return (\n    <Slider\n      value={value}\n      className={classes.root}\n      marks={marks}\n      valueLabelDisplay=\"auto\"\n      components={{\n        ValueLabel: ValueLabelComponent,\n      }}\n      onChange={handleSliderChange}\n    />\n  );\n}\n","import { Button, Box, Typography } from \"@mui/material\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { stakeNeuronMaturity } from \"@w2e/hooks\";\nimport { Flex, Modal, Progression } from \"@w2e/ui\";\nimport { Neuron } from \"@w2e/types\";\nimport { useMemo, useState } from \"react\";\nimport { TokenInfo } from \"types/token\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { parseTokenAmount, toSignificantWithGroupSeparator } from \"@w2e/utils\";\n\nexport interface StakeMaturityProps {\n  neuron: Neuron;\n  token: TokenInfo | undefined;\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  onStakeMaturitySuccess?: () => void;\n  disabled?: boolean;\n}\n\nexport function StakeMaturity({\n  neuron,\n  token,\n  governance_id,\n  neuron_id,\n  onStakeMaturitySuccess,\n  disabled,\n}: StakeMaturityProps) {\n  const [open, setOpen] = useState(false);\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [maturityPercent, setMaturityPercent] = useState<number>(0);\n\n  const { available_maturity } = useMemo(() => {\n    return {\n      auto_stake_maturity: neuron.auto_stake_maturity[0],\n      staked_maturity: neuron.staked_maturity_e8s_equivalent[0],\n      available_maturity: neuron.maturity_e8s_equivalent,\n    };\n  }, [neuron]);\n\n  const handleStakeMaturity = async () => {\n    if (loading || !governance_id || !neuron_id || maturityPercent === 0) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    const { data, message, status } = await stakeNeuronMaturity(governance_id, neuron_id, maturityPercent);\n\n    const result = data ? data.command[0] : undefined;\n    const neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!neuron_error) {\n        openTip(t`Stake maturity successfully`, TIP_SUCCESS);\n        setOpen(false);\n        setLoading(false);\n        if (onStakeMaturitySuccess) onStakeMaturitySuccess();\n      } else {\n        const message = neuron_error.error_message;\n        openTip(message === \"\" ? t`Failed to stake maturity` : message, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to stake maturity`, TIP_ERROR);\n    }\n\n    closeFullscreenLoading();\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <Button\n        onClick={() => setOpen(true)}\n        variant=\"contained\"\n        size=\"small\"\n        disabled={available_maturity.toString() === \"0\" || disabled}\n      >\n        <Trans>Stake</Trans>\n      </Button>\n\n      <Modal\n        open={open}\n        onClose={() => setOpen(false)}\n        title={t`Stake Maturity`}\n        showCancel\n        showConfirm\n        onConfirm={handleStakeMaturity}\n        onCancel={() => setOpen(false)}\n      >\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"10px 0\" }}>\n          <Flex justify=\"space-between\" align=\"center\">\n            <Typography color=\"text.primary\">\n              <Trans>Maturity Available</Trans>\n            </Typography>\n            <Typography>\n              {token\n                ? toSignificantWithGroupSeparator(parseTokenAmount(available_maturity, token?.decimals).toString())\n                : \"--\"}\n            </Typography>\n          </Flex>\n\n          <Typography>\n            <Trans>Choose how much of the maturity available to stake into this neuron.</Trans>\n          </Typography>\n\n          <Box sx={{ padding: \"0 20px 0 0\" }}>\n            <Progression value={maturityPercent} onChange={(value: number) => setMaturityPercent(value)} />\n          </Box>\n\n          <Typography align=\"right\" color=\"text.primary\">\n            {token\n              ? toSignificantWithGroupSeparator(\n                parseTokenAmount(available_maturity, token.decimals)\n                  .multipliedBy(maturityPercent)\n                  .dividedBy(100)\n                  .toString(),\n              )\n              : \"--\"}{\" \"}\n            maturity {maturityPercent}%\n          </Typography>\n        </Box>\n      </Modal>\n    </>\n  );\n}\n","import { Box, Typography, Checkbox } from \"@mui/material\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { autoStakeMaturity, disburseNeuronMaturity } from \"@w2e/hooks\";\nimport { Flex, ConfirmModal } from \"@w2e/ui\";\nimport { Neuron } from \"@w2e/types\";\nimport type { TokenInfo } from \"types/token\";\nimport { useMemo, useState } from \"react\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { parseTokenAmount, toSignificantWithGroupSeparator } from \"@w2e/utils\";\nimport { secondsToDuration } from \"@dfinity/utils\";\nimport { SnsNeuronPermissionType } from \"@w2e/constants\";\n\nimport { DisburseMaturity } from \"./DisburseMaturity\";\nimport { StakeMaturity } from \"./StakeMaturity\";\n\nexport interface MaturityProps {\n  neuron: Neuron;\n  token: TokenInfo | undefined;\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  onMaturitySuccess?: () => void;\n  permissions: number[];\n}\n\nexport function Maturity({ neuron, token, governance_id, neuron_id, onMaturitySuccess, permissions }: MaturityProps) {\n  const [open, setOpen] = useState(false);\n  const [disburseOpen, setDisburseOpen] = useState(false);\n\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { auto_stake_maturity, staked_maturity, available_maturity } = useMemo(() => {\n    return {\n      auto_stake_maturity: neuron.auto_stake_maturity[0],\n      staked_maturity: neuron.staked_maturity_e8s_equivalent[0],\n      available_maturity: neuron.maturity_e8s_equivalent,\n    };\n  }, [neuron]);\n\n  const handleToggleMaturity = () => {\n    if (!permissions.includes(SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_STAKE_MATURITY)) return;\n    setOpen(true);\n  };\n\n  const handleConfirm = async () => {\n    if (loading || !governance_id || !neuron_id) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    const { data, message, status } = await autoStakeMaturity(governance_id, neuron_id, !auto_stake_maturity);\n\n    const result = data ? data.command[0] : undefined;\n    const stop_dissolving_neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!stop_dissolving_neuron_error) {\n        openTip(t`Set automatically stake new maturity successfully`, TIP_SUCCESS);\n        if (onMaturitySuccess) onMaturitySuccess();\n      } else {\n        const message = stop_dissolving_neuron_error.error_message;\n        openTip(message === \"\" ? t`Failed to set automatically stake new maturity` : message, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to set automatically stake new maturity`, TIP_ERROR);\n    }\n\n    setLoading(false);\n    closeFullscreenLoading();\n  };\n\n  const handleDisburseMaturity = async () => {\n    if (loading || !governance_id || !neuron_id) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    const { data, message, status } = await disburseNeuronMaturity(governance_id, neuron_id);\n\n    const result = data ? data.command[0] : undefined;\n    const neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!neuron_error) {\n        openTip(t`Disburse maturity successfully`, TIP_SUCCESS);\n        setDisburseOpen(false);\n        setLoading(false);\n      } else {\n        const message = neuron_error.error_message;\n        openTip(message === \"\" ? t`Failed to disburse maturity` : message, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to disburse maturity`, TIP_ERROR);\n    }\n\n    closeFullscreenLoading();\n  };\n\n  return (\n    <Box sx={{ margin: \"20px 0 0 0\" }}>\n      <Flex align=\"center\" justify=\"space-between\">\n        <Typography color=\"text.primary\" fontSize=\"16px\" fontWeight={600}>\n          <Trans>Maturity</Trans>\n        </Typography>\n      </Flex>\n      <Typography fontSize=\"12px\" sx={{ margin: \"5px 0 0 0\" }}>\n        <Trans>Earn rewards by voting on proposals and/or following active neurons.</Trans>\n      </Typography>\n\n      <Flex gap=\"0 5px\" justify=\"space-between\" align=\"center\" margin=\"10px 0 0 0\">\n        <Typography color=\"text.primary\" fontWeight={500}>\n          Staked:&nbsp;\n          {token && staked_maturity\n            ? `${toSignificantWithGroupSeparator(parseTokenAmount(staked_maturity, token.decimals).toString())} ${token.symbol\n            }`\n            : \"--\"}\n        </Typography>\n      </Flex>\n\n      <Flex margin=\"10px 0 0 0\" gap=\"0 5px\" justify=\"space-between\" align=\"center\">\n        <Typography color=\"text.primary\" fontWeight={500}>\n          Available:&nbsp;\n          {token\n            ? `${toSignificantWithGroupSeparator(parseTokenAmount(available_maturity, token.decimals).toString())} ${token.symbol\n            }`\n            : \"--\"}\n        </Typography>\n\n        <Flex gap=\"0 5px\" align=\"center\">\n          <StakeMaturity\n            neuron={neuron}\n            neuron_id={neuron_id}\n            governance_id={governance_id}\n            token={token}\n            onStakeMaturitySuccess={onMaturitySuccess}\n            disabled={!permissions.includes(SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_STAKE_MATURITY)}\n          />\n\n          <DisburseMaturity\n            neuron={neuron}\n            neuron_id={neuron_id}\n            governance_id={governance_id}\n            onDisburseMaturitySuccess={onMaturitySuccess}\n            disabled={!permissions.includes(SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_DISBURSE_MATURITY)}\n          />\n        </Flex>\n      </Flex>\n\n      {neuron.disburse_maturity_in_progress.length > 0 ? (\n        <Box sx={{ margin: \"10px 0 0 0\" }}>\n          <Typography color=\"text.primary\" fontWeight={500}>\n            <Trans>Disbursing countdown</Trans>\n          </Typography>\n\n          <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"10px 0\", margin: \"10px 0 0 0\" }}>\n            {neuron.disburse_maturity_in_progress.map((e, index) => {\n              const finalize_disbursement_timestamp_seconds = e.finalize_disbursement_timestamp_seconds[0];\n\n              if (!finalize_disbursement_timestamp_seconds) return null;\n\n              const seconds =\n                finalize_disbursement_timestamp_seconds -\n                BigInt(parseInt((new Date().getTime() / 1000).toString(), 10));\n\n              return token ? (\n                <Typography key={index} sx={{ fontSize: \"12px\" }}>\n                  {parseTokenAmount(e.amount_e8s, token.decimals).toString()} {token?.symbol} remaining{\" \"}\n                  {secondsToDuration({ seconds })}\n                </Typography>\n              ) : null;\n            })}\n          </Box>\n        </Box>\n      ) : null}\n\n      <Box margin=\"15px 0 0 0\" sx={{ cursor: \"pointer\", width: \"fit-content\" }} onClick={handleToggleMaturity}>\n        <Flex gap=\"0 5px\">\n          <Checkbox\n            checked={auto_stake_maturity}\n            disabled={!permissions.includes(SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_STAKE_MATURITY)}\n          />\n          <Typography>\n            <Trans>Automatically stake new maturity.</Trans>\n          </Typography>\n        </Flex>\n      </Box>\n\n      <ConfirmModal\n        open={open}\n        onClose={() => setOpen(false)}\n        title={t`Maturity`}\n        onConfirm={handleConfirm}\n        text={\n          auto_stake_maturity\n            ? t`Are you sure that you would like to automatically stake new maturity of this neuron?`\n            : t`Are you sure that you would like to stop automatically staking new maturity of this neuron?`\n        }\n      />\n\n      <ConfirmModal\n        open={disburseOpen}\n        onClose={() => setDisburseOpen(false)}\n        title={t`Disburse Maturity`}\n        onConfirm={handleDisburseMaturity}\n        text={t`Are you sure you want to disburse this neuron?`}\n      />\n    </Box>\n  );\n}\n","import { useMemo, useState } from \"react\";\nimport { Button, Typography, Box } from \"@mui/material\";\nimport { toHexString, hexToBytes } from \"@w2e/utils\";\nimport { setNeuronFollows } from \"@w2e/hooks\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { Modal, FilledTextField } from \"components/index\";\nimport { Neuron } from \"@w2e/types\";\n\nexport interface AddFolloweeProps {\n  onFollowSuccess?: () => void;\n  neuron: Neuron | undefined;\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  func_id: bigint;\n}\n\nexport function AddFollowee({ func_id, onFollowSuccess, neuron, governance_id, neuron_id }: AddFolloweeProps) {\n  const [open, setOpen] = useState(false);\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [neuronId, setNeuronId] = useState<string | undefined>(undefined);\n\n  const handleClose = () => {\n    setOpen(false);\n    setNeuronId(\"\");\n  };\n\n  const handleSubmit = async () => {\n    if (loading || !neuronId || !governance_id || !neuron_id || !neuron) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    let follow_result = neuron.followees.find(([id]) => id === func_id);\n\n    if (!follow_result) {\n      follow_result = [func_id, { followees: [] }];\n    }\n\n    const [id, { followees }] = follow_result;\n\n    const isExist = !!followees.find((e) => toHexString(e.id) === neuronId);\n\n    if (isExist) {\n      openTip(t`The followee is existed`, TIP_ERROR);\n      setLoading(false);\n      closeFullscreenLoading();\n      return;\n    }\n\n    const new_followees = followees.concat([\n      {\n        id: hexToBytes(neuronId),\n      },\n    ]);\n\n    const { data, message, status } = await setNeuronFollows(governance_id, neuron_id, id, new_followees);\n\n    const result = data ? data.command[0] : undefined;\n    const split_neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!split_neuron_error) {\n        openTip(t`Set followees successfully`, TIP_SUCCESS);\n        handleClose();\n        if (onFollowSuccess) onFollowSuccess();\n      } else {\n        const message = split_neuron_error.error_message;\n        openTip(message !== \"\" ? message : t`Failed to set followees`, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to set followees`, TIP_ERROR);\n    }\n\n    setLoading(false);\n    closeFullscreenLoading();\n  };\n\n  const available_neuron_id = useMemo(() => {\n    let available = true;\n\n    if (!neuronId) return false;\n\n    try {\n      hexToBytes(neuronId);\n    } catch (err) {\n      available = false;\n    }\n\n    return available;\n  }, [neuronId]);\n\n  let error: string | undefined;\n  if (available_neuron_id === false) error = t`Invalid neuron id`;\n  if (neuronId === undefined) error = t`Enter the neuron id`;\n\n  return (\n    <>\n      <Button onClick={() => setOpen(true)} variant=\"contained\">\n        <Trans>Add Followee</Trans>\n      </Button>\n\n      <Modal open={open} onClose={handleClose} title={t`Add Followee`}>\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"24px 0\" }}>\n          <Box>\n            <Typography sx={{ margin: \"0 0 10px 0\" }}>\n              <Trans>Followee's Neuron Id</Trans>\n            </Typography>\n\n            <FilledTextField\n              placeholder={t`Neuron Id`}\n              value={neuronId}\n              onChange={(value: string) => setNeuronId(value)}\n              fullWidth\n              autoComplete=\"off\"\n            />\n          </Box>\n\n          <Button\n            variant=\"contained\"\n            fullWidth\n            size=\"large\"\n            disabled={loading || !!error}\n            onClick={handleSubmit}\n            startIcon={loading ? <CircularProgress size={26} color=\"inherit\" /> : null}\n          >\n            {error || <Trans>Confirm</Trans>}\n          </Button>\n        </Box>\n      </Modal>\n    </>\n  );\n}\n","import { useState } from \"react\";\nimport { toHexString } from \"@w2e/utils\";\nimport { setNeuronFollows } from \"@w2e/hooks\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { t } from \"@lingui/macro\";\nimport { Neuron } from \"@w2e/types\";\nimport { X } from \"react-feather\";\nimport { ConfirmModal } from \"@w2e/ui\";\n\nexport interface DeleteFolloweeProps {\n  onDeleteSuccess?: () => void;\n  neuron: Neuron | undefined;\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  func_id: bigint;\n  follow_id: Uint8Array | number[];\n}\n\nexport function DeleteFollowee({\n  func_id,\n  onDeleteSuccess,\n  neuron,\n  governance_id,\n  neuron_id,\n  follow_id,\n}: DeleteFolloweeProps) {\n  const [open, setOpen] = useState(false);\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const handleDeleteFollowee = async () => {\n    if (loading || !governance_id || !neuron || !neuron_id) return;\n\n    setOpen(false);\n    setLoading(true);\n    openFullscreenLoading();\n\n    const follow_result = neuron.followees.find(([id]) => id === func_id);\n\n    if (!follow_result) {\n      openTip(t`Some unknown error happened`, TIP_ERROR);\n      setLoading(false);\n      closeFullscreenLoading();\n      return;\n    }\n\n    const [id, { followees }] = follow_result;\n\n    const new_followees = followees.filter((followee) => toHexString(followee.id) !== toHexString(follow_id));\n\n    const { data, message, status } = await setNeuronFollows(governance_id, neuron_id, id, new_followees);\n\n    const result = data ? data.command[0] : undefined;\n    const split_neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!split_neuron_error) {\n        openTip(t`Delete followees successfully`, TIP_SUCCESS);\n        if (onDeleteSuccess) onDeleteSuccess();\n      } else {\n        const message = split_neuron_error.error_message;\n        openTip(message !== \"\" ? message : t`Failed to delete followees`, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to delete followees`, TIP_ERROR);\n    }\n\n    setLoading(false);\n    closeFullscreenLoading();\n  };\n\n  return (\n    <>\n      <X style={{ cursor: \"pointer\" }} size=\"18px\" onClick={() => setOpen(true)} />\n\n      <ConfirmModal\n        open={open}\n        onConfirm={handleDeleteFollowee}\n        onClose={() => setOpen(false)}\n        title={t`Delete Followee`}\n        text={t`Are you sure to delete this followee?`}\n      />\n    </>\n  );\n}\n","import { Trans, t } from \"@lingui/macro\";\nimport { useNeuronSystemFunctions, useNeuron } from \"@w2e/hooks\";\nimport { Modal } from \"@w2e/ui\";\nimport { Copy } from \"components/index\";\nimport { Button, Box, Typography, Collapse } from \"components/Mui\";\nimport { Neuron, NervousSystemFunction } from \"@w2e/types\";\nimport { useMemo, useState } from \"react\";\nimport { shorten, toHexString } from \"@w2e/utils\";\nimport { ChevronDown } from \"react-feather\";\nimport { ReactComponent as CopyIcon } from \"assets/icons/Copy.svg\";\n\nimport { AddFollowee } from \"./AddFollowee\";\nimport { DeleteFollowee } from \"./DeleteFollowee\";\n\ninterface FollowNeuronProps {\n  func: NervousSystemFunction;\n  neuron_id: Uint8Array | number[] | undefined;\n  governance_id: string | undefined;\n  neuron: Neuron | undefined;\n  refreshNeuron: () => void;\n}\n\nfunction FollowNeuron({ neuron, func, neuron_id, governance_id, refreshNeuron }: FollowNeuronProps) {\n  const [open, setOpen] = useState(false);\n\n  const following = useMemo(() => {\n    if (!neuron) return undefined;\n\n    return neuron.followees\n      .filter(([id]) => id === func.id)\n      .map(([, followees]) => followees.followees)\n      .flat();\n  }, [neuron, func]);\n\n  const handleRefreshNeuron = () => {\n    refreshNeuron();\n  };\n\n  return (\n    <Box>\n      <Box\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          cursor: \"pointer\",\n          color: \"text.primary\",\n        }}\n        onClick={() => setOpen(!open)}\n      >\n        <Typography color=\"text.primary\">{func.name}</Typography>\n        <Box\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            gap: \"0 5px\",\n          }}\n        >\n          <Typography color=\"text.primary\">{following?.length ?? \"0\"}</Typography>\n          <ChevronDown style={{ transform: open ? \"rotate(180deg)\" : \"rotate(0deg)\", transition: \"all 300ms\" }} />\n        </Box>\n      </Box>\n\n      <Collapse appear={false} in={open}>\n        <Box sx={{ margin: \"10px 0 0 0\" }}>\n          <Box>\n            <Typography sx={{ fontSize: \"12px\" }}>{func.description}</Typography>\n          </Box>\n\n          {following && following.length > 0 ? (\n            <Box sx={{ margin: \"20px 0 0 0\" }}>\n              <Typography>\n                <Trans>Current Following</Trans>\n              </Typography>\n\n              <Box sx={{ margin: \"10px 0 0 0\" }}>\n                {following?.map((follow) => (\n                  <Box\n                    key={toHexString(follow.id)}\n                    sx={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}\n                  >\n                    <Box sx={{ display: \"flex\", gap: \"0 5px\", alignItems: \"center\" }}>\n                      <Typography>{shorten(toHexString(follow.id), 8)}</Typography>\n                      <Copy content={toHexString(follow.id)}>\n                        <CopyIcon />\n                      </Copy>\n                    </Box>\n\n                    <DeleteFollowee\n                      neuron_id={neuron_id}\n                      governance_id={governance_id}\n                      neuron={neuron}\n                      func_id={func.id}\n                      follow_id={follow.id}\n                      onDeleteSuccess={handleRefreshNeuron}\n                    />\n                  </Box>\n                ))}\n              </Box>\n            </Box>\n          ) : null}\n\n          <Box sx={{ display: \"flex\", justifyContent: \"center\", margin: \"30px 0 0 0\" }}>\n            <AddFollowee\n              neuron={neuron}\n              func_id={func.id}\n              neuron_id={neuron_id}\n              governance_id={governance_id}\n              onFollowSuccess={handleRefreshNeuron}\n            />\n          </Box>\n        </Box>\n      </Collapse>\n    </Box>\n  );\n}\n\nexport interface FollowingProps {\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  disabled?: boolean;\n}\n\nexport function Followings({ governance_id, neuron_id, disabled }: FollowingProps) {\n  const [open, setOpen] = useState(false);\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n\n  const { result: neuron_system_functions } = useNeuronSystemFunctions(governance_id);\n  const { result: neuron } = useNeuron(governance_id, neuron_id, refreshTrigger);\n\n  return (\n    <Box>\n      <Typography color=\"text.primary\" fontSize=\"16px\" fontWeight={600}>\n        <Trans>Following</Trans>\n      </Typography>\n\n      <Typography fontSize=\"12px\" sx={{ margin: \"10px 0 0 0\" }}>\n        <Trans>\n          Following allows you to delegate your votes to another neuron holder. You still earn rewards if you delegate\n          your voting rights. You can change your following at any time.\n        </Trans>\n      </Typography>\n\n      <Button\n        sx={{ margin: \"10px 0 0 0\" }}\n        onClick={() => setOpen(true)}\n        variant=\"contained\"\n        size=\"small\"\n        disabled={disabled}\n      >\n        <Trans>Following</Trans>\n      </Button>\n\n      <Modal open={open} onClose={() => setOpen(false)} title={t`Follow neurons`}>\n        <Typography fontSize=\"12px\">\n          <Trans>\n            Follow neurons to automate your voting, and receive the maximum voting rewards. You can follow neurons on\n            specific topics or all topics.\n          </Trans>\n        </Typography>\n\n        <Box sx={{ margin: \"40px 0 0 0\", display: \"flex\", flexDirection: \"column\", gap: \"20px 0\" }}>\n          {neuron_system_functions?.functions.map((func) => (\n            <FollowNeuron\n              key={func.id.toString()}\n              func={func}\n              neuron_id={neuron_id}\n              governance_id={governance_id}\n              neuron={neuron}\n              refreshNeuron={() => setRefreshTrigger(refreshTrigger + 1)}\n            />\n          ))}\n        </Box>\n      </Modal>\n    </Box>\n  );\n}\n","import { Trans, t } from \"@lingui/macro\";\nimport { Modal } from \"@w2e/ui\";\nimport { FilledTextField } from \"components/index\";\nimport { Button, Box, Typography } from \"components/Mui\";\nimport { useMemo, useState } from \"react\";\nimport { isValidPrincipal, shorten } from \"@w2e/utils\";\nimport { neuronAddPermissions, neuronRemovePermissions } from \"@w2e/hooks\";\nimport { HotKeysPermissions } from \"@w2e/constants\";\nimport type { Neuron, NeuronPermission } from \"@w2e/types\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { Principal } from \"@dfinity/principal\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { X } from \"react-feather\";\n\nexport interface HotKeysProps {\n  governance_id: string | undefined;\n  neuron_id: Uint8Array | number[] | undefined;\n  onAddSuccess?: () => void;\n  onRemoveSuccess?: () => void;\n  neuron: Neuron;\n  disabled?: boolean;\n}\n\nexport function HotKeys({ neuron, governance_id, neuron_id, onAddSuccess, onRemoveSuccess, disabled }: HotKeysProps) {\n  const principal = useAccountPrincipal();\n  const [open, setOpen] = useState(false);\n  const [hotKey, setHotKey] = useState<undefined | string>(undefined);\n\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n\n  const handleHotKeyChange = (principal: string) => {\n    setHotKey(principal);\n  };\n\n  const handleClose = () => {\n    setHotKey(undefined);\n    setOpen(false);\n  };\n\n  const handleAddHotKey = async () => {\n    if (governance_id === undefined || hotKey === undefined || !neuron_id) return;\n\n    openFullscreenLoading();\n\n    const { status, message, data } = await neuronAddPermissions(\n      governance_id,\n      neuron_id,\n      Principal.fromText(hotKey),\n      HotKeysPermissions,\n    );\n\n    const result = data ? data.command[0] : undefined;\n    const manage_neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!manage_neuron_error) {\n        openTip(t`Add hotkeys successfully`, TIP_SUCCESS);\n        handleClose();\n        if (onAddSuccess) onAddSuccess();\n      } else {\n        const message = manage_neuron_error.error_message;\n        openTip(message !== \"\" ? message : t`Failed to add hotkeys`, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to add hotkeys`, TIP_ERROR);\n    }\n\n    closeFullscreenLoading();\n  };\n\n  const handleRemoveHotKey = async (permission: NeuronPermission) => {\n    if (governance_id === undefined || !neuron_id || disabled) return;\n\n    const { principal, permission_type } = permission;\n    const _principal = principal[0];\n\n    if (!_principal) return;\n\n    openFullscreenLoading();\n\n    const { status, message, data } = await neuronRemovePermissions(governance_id, neuron_id, _principal, [\n      ...permission_type,\n    ]);\n\n    const result = data ? data.command[0] : undefined;\n    const manage_neuron_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n    if (status === \"ok\") {\n      if (!manage_neuron_error) {\n        openTip(t`Remove hotkeys successfully`, TIP_SUCCESS);\n        if (onRemoveSuccess) onRemoveSuccess();\n      } else {\n        const message = manage_neuron_error.error_message;\n        openTip(message !== \"\" ? message : t`Failed to remove hotkeys`, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to remove hotkeys`, TIP_ERROR);\n    }\n\n    closeFullscreenLoading();\n  };\n\n  const permissions = useMemo(() => {\n    return neuron.permissions.filter((permission) => {\n      return permission.principal.toString() !== principal?.toString();\n    });\n  }, [neuron, principal]);\n\n  let error: string | undefined;\n  if (!hotKey) error = t`Enter the hotkey`;\n  if (hotKey && !isValidPrincipal(hotKey)) error = t`Invalid principal ID`;\n\n  return (\n    <Box>\n      <Typography color=\"text.primary\" fontSize=\"16px\" fontWeight={600}>\n        <Trans>Hotkeys</Trans>\n      </Typography>\n\n      <Typography fontSize=\"12px\" sx={{ margin: \"10px 0 0 0\" }}>\n        <Trans>\n          To vote with this neuron from another dapp, add the principal id you have in the other dapp as a hotkey.\n        </Trans>\n      </Typography>\n\n      <Box sx={{ margin: \"10px 0 0 0\", display: \"flex\", flexDirection: \"column\", gap: \"6px 0\" }}>\n        {permissions.map((permission) => (\n          <Box\n            key={permission.principal.toString()}\n            sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}\n          >\n            <Typography\n              sx={{\n                color: \"#ffffff\",\n                fontWeight: 500,\n              }}\n            >\n              {shorten(permission.principal.toString(), 12)}\n            </Typography>\n\n            <X\n              style={{ cursor: disabled ? \"default\" : \"pointer\", color: disabled ? \"#4F5A84\" : \"#ffffff\" }}\n              size=\"18px\"\n              onClick={() => handleRemoveHotKey(permission)}\n            />\n          </Box>\n        ))}\n      </Box>\n\n      <Button\n        sx={{ margin: \"10px 0 0 0\" }}\n        onClick={() => setOpen(true)}\n        variant=\"contained\"\n        size=\"small\"\n        disabled={disabled}\n      >\n        <Trans>Add Hotkey</Trans>\n      </Button>\n\n      <Modal open={open} onClose={() => setOpen(false)} title={t`Add Hotkey`}>\n        <FilledTextField placeholder={t`Enter hotkey principal ID`} onChange={handleHotKeyChange} />\n        <Box sx={{ margin: \"20px 0 0 0\" }}>\n          <Button fullWidth variant=\"contained\" size=\"large\" disabled={error !== undefined} onClick={handleAddHotKey}>\n            {error === undefined ? <Trans>Confirm</Trans> : error}\n          </Button>\n        </Box>\n      </Modal>\n    </Box>\n  );\n}\n","import React, { useMemo, useState } from \"react\";\nimport { Button, Grid, Typography, Box, InputAdornment } from \"@mui/material\";\nimport { parseTokenAmount, formatTokenAmount, uint8ArrayToBigInt } from \"@w2e/utils\";\nimport { claimOrRefreshNeuronFromAccount } from \"@w2e/hooks\";\nimport { tokenTransfer } from \"hooks/token/calls\";\nimport BigNumber from \"bignumber.js\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { useTips, TIP_ERROR, TIP_SUCCESS, useFullscreenLoading } from \"hooks/useTips\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { TokenInfo } from \"types/token\";\nimport type { NervousSystemParameters } from \"@w2e/types\";\nimport { Modal, NumberFilledTextField } from \"components/index\";\nimport MaxButton from \"components/MaxButton\";\nimport { useTokenBalance } from \"hooks/token\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { SubAccount } from \"@dfinity/ledger-icp\";\nimport randomBytes from \"randombytes\";\nimport { buildNeuronStakeSubAccount } from \"utils/sns/neurons\";\n\nexport interface StakeProps {\n  onStakeSuccess?: () => void;\n  token: TokenInfo | undefined;\n  governance_id: string | undefined;\n  neuronSystemParameters: NervousSystemParameters | undefined;\n}\n\nexport function StakeToCreateNeuron({ onStakeSuccess, token, governance_id, neuronSystemParameters }: StakeProps) {\n  const principal = useAccountPrincipal();\n  const [open, setOpen] = useState(false);\n  const [openFullscreenLoading, closeFullscreenLoading] = useFullscreenLoading();\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [amount, setAmount] = useState<string | undefined>(undefined);\n\n  const { result: balance } = useTokenBalance(token?.canisterId, principal);\n\n  const { neuron_minimum_stake_e8s } = useMemo(() => {\n    if (!neuronSystemParameters) return {};\n\n    return {\n      neuron_minimum_stake_e8s: neuronSystemParameters.neuron_minimum_stake_e8s[0],\n    };\n  }, [neuronSystemParameters]);\n\n  const handleClose = () => {\n    setOpen(false);\n    setAmount(\"\");\n  };\n\n  const handleSubmit = async () => {\n    if (loading || !amount || !principal || !token || !governance_id) return;\n\n    setLoading(true);\n    openFullscreenLoading();\n\n    const nonceBytes = new Uint8Array(randomBytes(8));\n    const subaccount = buildNeuronStakeSubAccount(nonceBytes, principal);\n\n    const { message, status } = await tokenTransfer({\n      canisterId: token.canisterId,\n      to: governance_id,\n      subaccount: [...subaccount.toUint8Array()],\n      amount: formatTokenAmount(amount, token.decimals),\n      from: principal.toString(),\n      memo: [...nonceBytes],\n    });\n\n    if (status === \"ok\") {\n      const refreshSub = SubAccount.fromPrincipal(principal);\n      const memo = uint8ArrayToBigInt(nonceBytes);\n      const { status, message, data } = await claimOrRefreshNeuronFromAccount(governance_id, principal, memo, [\n        ...refreshSub.toUint8Array(),\n      ]);\n\n      const result = data ? data.command[0] : undefined;\n      const command_error = result ? (\"Error\" in result ? result.Error : undefined) : undefined;\n\n      if (status === \"ok\") {\n        if (!command_error) {\n          openTip(t`Staked successfully`, TIP_SUCCESS);\n          if (onStakeSuccess) onStakeSuccess();\n          handleClose();\n        } else {\n          const message = command_error.error_message;\n          openTip(message !== \"\" ? message : t`Failed to stake`, TIP_ERROR);\n        }\n      } else {\n        openTip(message !== \"\" ? message : t`Failed to stake`, TIP_ERROR);\n      }\n    } else {\n      openTip(message ?? t`Failed to stake`, TIP_ERROR);\n    }\n\n    setLoading(false);\n    closeFullscreenLoading();\n  };\n\n  const handleMax = (event: React.MouseEvent<HTMLParagraphElement>) => {\n    event.stopPropagation();\n    if (!token || !balance) return;\n    setAmount(parseTokenAmount(balance.minus(token.transFee.toString()), token.decimals).toString());\n  };\n\n  let error: string | undefined;\n  if (!amount) error = t`Enter the amount`;\n  if (token === undefined) error = t`Some unknown error happened`;\n  if (\n    amount &&\n    token &&\n    balance &&\n    parseTokenAmount(balance.minus(token.transFee.toString()), token.decimals).isLessThan(amount)\n  )\n    error = t`There are not enough funds in this account`;\n\n  if (amount && neuron_minimum_stake_e8s && parseTokenAmount(neuron_minimum_stake_e8s, 8).isGreaterThan(amount))\n    error = t`At least ${parseTokenAmount(neuron_minimum_stake_e8s, 8).toString()} ${token?.symbol}`;\n\n  return (\n    <>\n      <Button onClick={() => setOpen(true)} variant=\"contained\" size=\"small\">\n        <Trans>Stake</Trans>\n      </Button>\n\n      <Modal open={open} onClose={handleClose} title={t`Create Neuron Stake`}>\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: \"24px 0\" }}>\n          <NumberFilledTextField\n            placeholder={t`Enter the amount`}\n            value={amount}\n            onChange={(value: string) => setAmount(value)}\n            fullWidth\n            numericProps={{\n              allowNegative: false,\n              decimalScale: token?.decimals,\n            }}\n            autoComplete=\"off\"\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <MaxButton onClick={handleMax} />\n                </InputAdornment>\n              ),\n            }}\n          />\n\n          <Grid container alignItems=\"center\">\n            <Typography>\n              {token && balance ? (\n                <Trans>\n                  Balance:&nbsp;\n                  {`${new BigNumber(\n                    parseTokenAmount(balance, token.decimals).toFixed(token.decimals > 8 ? 8 : token.decimals),\n                  ).toFormat()}`}\n                </Trans>\n              ) : (\n                \"--\"\n              )}\n            </Typography>\n          </Grid>\n          <Typography>\n            {token ? (\n              <>\n                <Trans>Fee:</Trans>&nbsp;\n                {parseTokenAmount(token.transFee.toString(), token.decimals).toFormat()}&nbsp;\n                {token.symbol}\n              </>\n            ) : (\n              \"--\"\n            )}\n          </Typography>\n\n          <Button\n            variant=\"contained\"\n            fullWidth\n            size=\"large\"\n            disabled={loading || error !== undefined}\n            onClick={handleSubmit}\n            startIcon={loading ? <CircularProgress size={26} color=\"inherit\" /> : null}\n          >\n            {error || <Trans>Confirm</Trans>}\n          </Button>\n        </Box>\n      </Modal>\n    </>\n  );\n}\n","import { Box, Typography, useTheme } from \"@mui/material\";\nimport { useListDeployedSNSs, useListNeurons, useNervousSystemParameters } from \"@w2e/hooks\";\nimport { useMemo, useState } from \"react\";\nimport { LoadingRow, Copy } from \"components/index\";\nimport type { Neuron, NervousSystemParameters } from \"@w2e/types\";\nimport { SnsNeuronPermissionType } from \"@w2e/constants\";\nimport { Theme } from \"@mui/material/styles\";\nimport { SelectSns } from \"components/sns/SelectSNSTokens\";\nimport { useAccountPrincipal, useAccountPrincipalString } from \"store/auth/hooks\";\nimport { neuronFormat, NeuronState, getDissolvingTimeInSeconds } from \"utils/sns/neurons\";\nimport { parseTokenAmount, shorten, toSignificantWithGroupSeparator } from \"@w2e/utils\";\nimport { ReactComponent as CopyIcon } from \"assets/icons/Copy.svg\";\nimport { Lock, Clock } from \"react-feather\";\nimport { useTokenInfo } from \"hooks/token\";\nimport { secondsToDuration } from \"@dfinity/utils\";\nimport { Tabs } from \"components/sns/Tab\";\nimport type { TokenInfo } from \"types/token\";\n\nimport { SplitNeuron } from \"./components/SplitNeuron\";\nimport { StopDissolving } from \"./components/StopDissolving\";\nimport { Dissolve } from \"./components/Dissolve\";\nimport { Stake } from \"./components/Stake\";\nimport { SetDissolveDelay } from \"./components/Delay\";\nimport { Disburse } from \"./components/Disburse\";\nimport { Maturity } from \"./components/Maturity\";\nimport { Followings } from \"./components/Following\";\nimport { HotKeys } from \"./components/HotKeys\";\nimport { StakeToCreateNeuron } from \"./components/StakeToCreateNeuron\";\n\ninterface NeuronProps {\n  neuron: Neuron;\n  ledger_id: string | undefined;\n  root_id: string | null;\n  governance_id: string | undefined;\n  neuronSystemParameters: NervousSystemParameters | undefined;\n  refreshTrigger: () => void;\n  token: TokenInfo | undefined;\n}\n\nfunction NeuronItem({ neuron, token, governance_id, neuronSystemParameters, refreshTrigger }: NeuronProps) {\n  const theme = useTheme() as Theme;\n  const principal = useAccountPrincipal();\n  const [splitNeuronOpen, setSplitNeuronOpen] = useState(false);\n\n  const formatted_neuron = neuronFormat(neuron);\n\n  const seconds = getDissolvingTimeInSeconds(neuron) ?? formatted_neuron.dissolve_delay;\n\n  const { neuron_id, permissions } = useMemo(() => {\n    const permission = neuron.permissions.filter(\n      (permission) => permission.principal.toString() === principal?.toString(),\n    )[0];\n\n    return {\n      neuron_id: neuron.id[0]?.id,\n      permissions: [...(permission?.permission_type ?? [])],\n    };\n  }, [neuron, principal]);\n\n  const handleSuccessTrigger = () => {\n    refreshTrigger();\n  };\n\n  return formatted_neuron.dissolve_state === NeuronState.Spawning ? null : (\n    <>\n      <Box\n        sx={{\n          background: theme.palette.background.level4,\n          borderRadius: \"12px\",\n          padding: \"20px\",\n          \"@media(max-width: 640px)\": {\n            padding: \"10px\",\n          },\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <Box sx={{ display: \"flex\", gap: \"0 5px\", alignItems: \"center\" }}>\n            <Typography color=\"text.primary\">{formatted_neuron.id ? shorten(formatted_neuron.id, 6) : \"--\"}</Typography>\n            {formatted_neuron.id ? (\n              <Copy content={formatted_neuron.id}>\n                <CopyIcon color={theme.colors.darkSecondaryMain} />\n              </Copy>\n            ) : null}\n          </Box>\n\n          <Box sx={{ display: \"flex\", gap: \"0 8px\", alignItems: \"center\" }}>\n            {formatted_neuron.dissolve_state === NeuronState.Locked ? <Lock size=\"16px\" /> : null}\n            {formatted_neuron.dissolve_state === NeuronState.Dissolving ? <Clock size=\"16px\" /> : null}\n            <Typography>{formatted_neuron.dissolve_state_text}</Typography>\n          </Box>\n        </Box>\n\n        <Box sx={{ display: \"flex\", margin: \"20px 0 0 0\" }}>\n          <Typography color=\"text.primary\" fontWeight={500} fontSize=\"24px\">\n            {token\n              ? `${toSignificantWithGroupSeparator(\n                parseTokenAmount(formatted_neuron.cached_neuron_stake_e8s, token.decimals).toString(),\n              )} ${token.symbol}`\n              : \"--\"}\n          </Typography>\n        </Box>\n\n        <Box sx={{ margin: \"20px 0 0 0\" }}>\n          <Typography>{seconds ? secondsToDuration({ seconds }) : \"--\"}</Typography>\n        </Box>\n\n        <Box sx={{ display: \"flex\", gap: \"8px\", margin: \"20px 0 0 0\", flexWrap: \"wrap\" }}>\n          <SplitNeuron\n            governance_id={governance_id}\n            neuron_id={neuron.id[0]?.id}\n            open={splitNeuronOpen}\n            onClose={() => setSplitNeuronOpen(false)}\n            token={token}\n            neuronSystemParameters={neuronSystemParameters}\n            neuron_stake={neuron.cached_neuron_stake_e8s}\n            onSplitSuccess={handleSuccessTrigger}\n            disabled={!permissions.includes(SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_SPLIT)}\n          />\n\n          <Stake\n            governance_id={governance_id}\n            neuron_id={neuron.id[0]?.id}\n            open={splitNeuronOpen}\n            onClose={() => setSplitNeuronOpen(false)}\n            token={token}\n            onStakeSuccess={handleSuccessTrigger}\n          />\n\n          <SetDissolveDelay\n            governance_id={governance_id}\n            neuron_id={neuron.id[0]?.id}\n            open={splitNeuronOpen}\n            onClose={() => setSplitNeuronOpen(false)}\n            token={token}\n            neuron={neuron}\n            neuronSystemParameters={neuronSystemParameters}\n            neuron_stake={neuron.cached_neuron_stake_e8s}\n            onSetSuccess={handleSuccessTrigger}\n            disabled={!permissions.includes(SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_CONFIGURE_DISSOLVE_STATE)}\n          />\n\n          {formatted_neuron.dissolve_state === NeuronState.Dissolving ? (\n            <StopDissolving\n              governance_id={governance_id}\n              neuron_id={neuron.id[0]?.id}\n              onStopSuccess={handleSuccessTrigger}\n              disabled={!permissions.includes(SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_CONFIGURE_DISSOLVE_STATE)}\n            />\n          ) : formatted_neuron.dissolve_state === NeuronState.Dissolved ? (\n            <Disburse\n              governance_id={governance_id}\n              neuron_id={neuron.id[0]?.id}\n              onDisburseSuccess={handleSuccessTrigger}\n              disabled={!permissions.includes(SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_DISBURSE)}\n            />\n          ) : (\n            <Dissolve\n              governance_id={governance_id}\n              neuron_id={neuron.id[0]?.id}\n              onDissolveSuccess={handleSuccessTrigger}\n              disabled={!permissions.includes(SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_CONFIGURE_DISSOLVE_STATE)}\n            />\n          )}\n        </Box>\n\n        <Maturity\n          neuron={neuron}\n          token={token}\n          governance_id={governance_id}\n          neuron_id={neuron.id[0]?.id}\n          onMaturitySuccess={handleSuccessTrigger}\n          permissions={permissions}\n        />\n\n        <Box sx={{ margin: \"20px 0 0 0\", display: \"grid\", gridTemplateColumns: \"1fr\", gap: \"20px 0\" }}>\n          <Followings neuron_id={neuron_id} governance_id={governance_id} disabled={false} />\n\n          <HotKeys\n            neuron_id={neuron_id}\n            governance_id={governance_id}\n            neuron={neuron}\n            onAddSuccess={handleSuccessTrigger}\n            onRemoveSuccess={handleSuccessTrigger}\n            disabled={!permissions.includes(SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_MANAGE_PRINCIPALS)}\n          />\n        </Box>\n      </Box>\n    </>\n  );\n}\n\nexport default function Neurons() {\n  const principal = useAccountPrincipalString();\n  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);\n\n  const [selectedNeuron, setSelectedNeuron] = useState<string | null>(\"csyra-haaaa-aaaaq-aacva-cai\");\n\n  const { result: listedSNS } = useListDeployedSNSs();\n\n  const sns = useMemo(() => {\n    if (!selectedNeuron || !listedSNS) return undefined;\n\n    const instance = listedSNS.instances.find((e) => e.root_canister_id.toString() === selectedNeuron);\n\n    if (!instance) return undefined;\n\n    return instance;\n  }, [listedSNS, selectedNeuron]);\n\n  const { governance_id, ledger_id } = useMemo(() => {\n    if (!sns) return { governance_id: undefined, ledger_id: undefined };\n    return { governance_id: sns.governance_canister_id.toString(), ledger_id: sns.ledger_canister_id.toString() };\n  }, [sns]);\n\n  const { result: neuronSystemParameters } = useNervousSystemParameters(governance_id);\n\n  const { result: listNeurons, loading } = useListNeurons({\n    canisterId: governance_id,\n    limit: 100,\n    of_principal: principal,\n    refresh: refreshTrigger,\n  });\n\n  const handleRefresh = () => {\n    setRefreshTrigger(refreshTrigger + 1);\n  };\n\n  const filteredNeurons = useMemo(() => {\n    if (!listNeurons) return undefined;\n    return listNeurons?.filter((neuron) => neuron.cached_neuron_stake_e8s !== BigInt(0));\n  }, [listNeurons]);\n\n  const { result: tokenInfo } = useTokenInfo(ledger_id);\n\n  return (\n    <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n      <Box sx={{ maxWidth: \"1400px\", width: \"100%\" }}>\n        <Tabs />\n\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            margin: \"20px 0 0 0\",\n            width: \"100%\",\n            \"@media(max-width: 640px)\": {\n              flexDirection: \"column\",\n              gap: \"10px 0\",\n              justifyContent: \"flex-start\",\n              alignItems: \"flex-start\",\n            },\n          }}\n        >\n          <SelectSns value={selectedNeuron} onChange={setSelectedNeuron} />\n          <Box>\n            <StakeToCreateNeuron\n              onStakeSuccess={handleRefresh}\n              token={tokenInfo}\n              governance_id={governance_id}\n              neuronSystemParameters={neuronSystemParameters}\n            />\n          </Box>\n        </Box>\n\n        {!loading ? (\n          filteredNeurons && filteredNeurons?.length > 0 ? (\n            <Box\n              sx={{\n                display: \"grid\",\n                gap: \"20px\",\n                margin: \"20px 0 0 0\",\n                gridTemplateColumns: \"1fr 1fr 1fr\",\n                \"@media (max-width:1088px)\": {\n                  gridTemplateColumns: \"1fr 1fr\",\n                },\n                \"@media (max-width:640px)\": {\n                  gridTemplateColumns: \"1fr\",\n                },\n              }}\n            >\n              {filteredNeurons?.map((neuron, index) => (\n                <NeuronItem\n                  key={index}\n                  neuron={neuron}\n                  ledger_id={ledger_id}\n                  root_id={selectedNeuron}\n                  governance_id={governance_id}\n                  neuronSystemParameters={neuronSystemParameters}\n                  refreshTrigger={handleRefresh}\n                  token={tokenInfo}\n                />\n              ))}\n            </Box>\n          ) : (\n            <Typography sx={{ margin: \"20px 0 0 0\" }}>No Neurons</Typography>\n          )\n        ) : (\n          <Box sx={{ margin: \"20px 0 0 0\" }}>\n            <LoadingRow>\n              <div />\n              <div />\n              <div />\n              <div />\n              <div />\n              <div />\n              <div />\n              <div />\n            </LoadingRow>\n          </Box>\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import dayjs from \"dayjs\";\nimport { SECONDS_IN_DAY } from \"@w2e/constants\";\n\nexport function nanosecond2Millisecond(time: string | number | bigint) {\n  return Number(BigInt(time) / BigInt(1000000));\n}\n\nexport function millisecond2Nanosecond(time: string | number | bigint) {\n  return Number(BigInt(time) * BigInt(1000000));\n}\n\nexport function timestampFormat(timestamp: bigint | string | number, format = \"YYYY-MM-DD HH:mm:ss\"): string {\n  if (!timestamp) return \"\";\n\n  const newTimestamp = Number(String(timestamp).substr(0, 13));\n  return dayjs(newTimestamp).format(format);\n}\n\nexport const secondsToDays = (seconds: number): number => seconds / SECONDS_IN_DAY;\nexport const daysToSeconds = (days: number): number => Math.round(days * SECONDS_IN_DAY);\n"],"names":["MaxButton","props","_props$sx","theme","useTheme","_jsx","Typography","sx","padding","cursor","borderRadius","backgroundColor","colors","secondaryMain","color","fontSize","children","Trans","id","SelectSns","_ref","onChange","value","result","snsAllTokensInfo","useFetchSnsAllTokensInfo","completedSns","useMemo","filter","e","lifecycle","SnsSwapLifecycle","Committed","menus","map","canister_ids","root_canister_id","label","_jsxs","Box","display","gap","alignItems","AvatarImage","src","meta","logo","width","height","fontWeight","name","Select","Tabs","TabPanel","tabs","key","path","SplitNeuron","onSplitSuccess","neuron_stake","token","governance_id","neuron_id","neuronSystemParameters","disabled","open","setOpen","useState","openFullscreenLoading","closeFullscreenLoading","useFullscreenLoading","openTip","useTips","loading","setLoading","amount","setAmount","undefined","neuron_minimum_stake","neuron_minimum_stake_e8s","error","i18n","_","BigNumber","plus","parseTokenAmount","transFee","decimals","isGreaterThan","minus","formatTokenAmount","toString","values","0","toFormat","1","symbol","canSplit","BigInt","_Fragment","Button","onClick","variant","size","Modal","onClose","title","flexDirection","NumberFilledTextField","placeholder","fullWidth","numericProps","allowNegative","decimalScale","autoComplete","InputProps","endAdornment","InputAdornment","position","event","stopPropagation","Grid","container","toFixed","async","nonceBytes","Uint8Array","randomBytes","memo","uint8ArrayToBigInt","data","message","status","splitNeuron","command","split_neuron_error","Error","error_message","TIP_ERROR","TIP_SUCCESS","startIcon","CircularProgress","StopDissolving","onStopSuccess","ConfirmModal","onConfirm","stopDissolvingNeuron","stop_dissolving_neuron_error","text","Dissolve","onDissolveSuccess","dissolveNeuron","Stake","onStakeSuccess","principal","useAccountPrincipal","balance","useTokenBalance","canisterId","isLessThan","tokenTransfer","to","subaccount","from","claimOrRefreshNeuron","SetDissolveDelay","onSetSuccess","neuron","day","setDay","neuron_minimum_dissolve_seconds","neuron_max_dissolve_seconds","neuron_max_dissolve_delay_bonus_percentage","aging_since_timestamp_seconds","neuron_max_age_bonus","neuron_max_age_percentage","staked_maturity_e8s_equivalent","formatted_neuron","neuronFormat","neuron_minimum_dissolve_delay_to_vote_seconds","max_dissolve_delay_seconds","max_dissolve_delay_bonus_percentage","max_neuron_age_for_age_bonus","max_age_bonus_percentage","dissolveDelay","dissolve_delay","whenDissolvedSeconds","when_dissolved_timestamp_seconds","currentDissolveDelaySeconds","_getSnsDelayTimeInSec","getSnsDelayTimeInSeconds","votingPower","newDelayInSeconds","daysToSeconds","Number","lt","dissolveDelayBonus","div","times","now","Math","ceil","Date","getTime","aging","parseInt","dissolveState","dissolve_state","Object","keys","ageBonus","decimalPlaces","votingPowerPercentage","maxDelay","val","concat","toHexString","toSignificantWithGroupSeparator","secondsToDissolveDelayDuration","justifyContent","MinButton","handleMin","secondsToDays","max","handleMax","palette","warning","dark","background","level1","margin","increaseNeuronDelay","manage_neuron_error","Disburse","onDisburseSuccess","disburseNeuron","Flex","vertical","align","justify","border","gridAutoRows","DisburseMaturity","onDisburseMaturitySuccess","disburseOpen","setDisburseOpen","available_maturity","auto_stake_maturity","staked_maturity","maturity_e8s_equivalent","disburseNeuronMaturity","neuron_error","t","marks","makeStyles","level4","marginLeft","top","transform","tooltip","LightTooltip","styled","_a","className","__rest","Tooltip","classes","popper","tooltipClasses","ValueLabelComponent","useStyle","placement","arrow","Progression","_ref2","Slider","root","valueLabelDisplay","components","ValueLabel","handleSliderChange","StakeMaturity","onStakeMaturitySuccess","maturityPercent","setMaturityPercent","showCancel","showConfirm","stakeNeuronMaturity","onCancel","multipliedBy","dividedBy","Maturity","onMaturitySuccess","permissions","includes","SnsNeuronPermissionType","NEURON_PERMISSION_TYPE_STAKE_MATURITY","NEURON_PERMISSION_TYPE_DISBURSE_MATURITY","disburse_maturity_in_progress","length","index","finalize_disbursement_timestamp_seconds","seconds","amount_e8s","secondsToDuration","handleToggleMaturity","Checkbox","checked","autoStakeMaturity","AddFollowee","func_id","onFollowSuccess","neuronId","setNeuronId","handleClose","available","hexToBytes","err","FilledTextField","follow_result","followees","find","new_followees","setNeuronFollows","DeleteFollowee","onDeleteSuccess","follow_id","X","style","followee","FollowNeuron","_following$length","func","refreshNeuron","following","_ref3","flat","handleRefreshNeuron","ChevronDown","transition","Collapse","appear","in","description","follow","shorten","Copy","content","CopyIcon","Followings","_ref4","refreshTrigger","setRefreshTrigger","neuron_system_functions","useNeuronSystemFunctions","useNeuron","functions","HotKeys","onAddSuccess","onRemoveSuccess","hotKey","setHotKey","permission","isValidPrincipal","permission_type","_principal","neuronRemovePermissions","handleRemoveHotKey","neuronAddPermissions","Principal","fromText","HotKeysPermissions","StakeToCreateNeuron","buildNeuronStakeSubAccount","toUint8Array","refreshSub","SubAccount","fromPrincipal","claimOrRefreshNeuronFromAccount","command_error","NeuronItem","_getDissolvingTimeInS","_neuron$id$2","_neuron$id$3","_neuron$id$4","_neuron$id$5","_neuron$id$6","_neuron$id$7","_neuron$id$8","splitNeuronOpen","setSplitNeuronOpen","getDissolvingTimeInSeconds","_neuron$id$","_permission$permissio","handleSuccessTrigger","NeuronState","Spawning","darkSecondaryMain","Locked","Lock","Dissolving","Clock","dissolve_state_text","cached_neuron_stake_e8s","flexWrap","NEURON_PERMISSION_TYPE_SPLIT","NEURON_PERMISSION_TYPE_CONFIGURE_DISSOLVE_STATE","Dissolved","NEURON_PERMISSION_TYPE_DISBURSE","gridTemplateColumns","NEURON_PERMISSION_TYPE_MANAGE_PRINCIPALS","Neurons","useAccountPrincipalString","selectedNeuron","setSelectedNeuron","listedSNS","useListDeployedSNSs","sns","instance","instances","ledger_id","governance_canister_id","ledger_canister_id","useNervousSystemParameters","listNeurons","useListNeurons","limit","of_principal","refresh","handleRefresh","filteredNeurons","tokenInfo","useTokenInfo","maxWidth","LoadingRow","root_id","nanosecond2Millisecond","time","millisecond2Nanosecond","timestampFormat","timestamp","format","arguments","newTimestamp","String","substr","dayjs","SECONDS_IN_DAY","days","round"],"sourceRoot":""}