{"version":3,"file":"static/js/2789.d156a6a3.chunk.js","mappings":"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","sources":["components/Layout/CardContent1120.tsx","views/console/burn/ConfirmBurn.tsx","views/console/burn/index.tsx","../packages/hooks/src/token/calls.ts","../packages/ui/src/components/Modal/Modal.tsx"],"sourcesContent":["import { Box } from \"@mui/material\";\n\nexport interface CardContent1120Props {\n  children: React.ReactNode;\n}\n\nexport function CardContent1120({ children }: CardContent1120Props) {\n  return (\n    <Box sx={{ display: \"flex\", width: \"100%\", justifyContent: \"center\" }}>\n      <Box sx={{ width: \"100%\", maxWidth: \"1120px\" }}>{children}</Box>\n    </Box>\n  );\n}\n","import { Modal } from \"@w2e/ui\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { TokenImage } from \"components/index\";\nimport { Typography, Box, Button, CircularProgress } from \"components/Mui\";\nimport { type TokenInfo } from \"types/token\";\nimport { tokenTransfer } from \"hooks/token/calls\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { BigNumber, formatTokenAmount } from \"@w2e/utils\";\nimport { useSuccessTip, useErrorTip, useLoadingTip } from \"hooks/useTips\";\nimport { useState } from \"react\";\n\nexport interface ConfirmBurnProps {\n  open: boolean;\n  onClose: () => void;\n  token: TokenInfo | undefined;\n  mintingAccount:\n  | {\n    owner: string;\n    sub: number[] | undefined;\n  }\n  | undefined;\n  amount: string | undefined;\n  onBurnSuccess?: () => void;\n}\n\nexport function ConfirmBurnModal({ open, onClose, token, mintingAccount, amount, onBurnSuccess }: ConfirmBurnProps) {\n  const principal = useAccountPrincipal();\n\n  const [loading, setLoading] = useState(false);\n  const [openSuccessTip] = useSuccessTip();\n  const [openErrorTip] = useErrorTip();\n  const [openLoadingTip, closeLoadingTip] = useLoadingTip();\n\n  const handleConfirm = async () => {\n    if (loading || amount === undefined || mintingAccount === undefined || !token || !principal) return;\n\n    setLoading(true);\n\n    const loadingKey = openLoadingTip(t`Burning ${amount} ${token.symbol}`);\n    onClose();\n\n    const { status, message } = await tokenTransfer({\n      canisterId: token.canisterId,\n      to: mintingAccount.owner,\n      subaccount: mintingAccount.sub,\n      from: principal.toString(),\n      amount: formatTokenAmount(amount, token.decimals),\n    });\n\n    closeLoadingTip(loadingKey);\n\n    if (status === \"ok\") {\n      openSuccessTip(`Burn ${token.symbol} successfully`);\n      if (onBurnSuccess) onBurnSuccess();\n    } else {\n      openErrorTip(message ?? `Failed to burn ${token.symbol}`);\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <Modal open={open} onClose={onClose} title={t`Confirm Burn`}>\n      <Box sx={{ padding: \"30px 0 0 0\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n        <TokenImage logo={token?.logo} size=\"56px\" />\n        <Typography sx={{ fontSize: \"20px\", fontWeight: 600, color: \"text.primary\", margin: \"12px 0 0 0\" }}>\n          {token?.symbol}\n        </Typography>\n      </Box>\n\n      <Box sx={{ margin: \"32px 0 0 0\" }}>\n        <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <Typography>\n            <Trans>Minting Account</Trans>\n          </Typography>\n          <Typography color=\"text.primary\">{mintingAccount?.owner}</Typography>\n        </Box>\n\n        <Box sx={{ display: \"flex\", justifyContent: \"space-between\", margin: \"20px 0 0 0\" }}>\n          <Typography>\n            <Trans>Amount</Trans>\n          </Typography>\n          <Typography color=\"text.primary\">{amount ? new BigNumber(amount).toFormat() : \"--\"}</Typography>\n        </Box>\n      </Box>\n\n      <Box sx={{ margin: \"48px 0 0 0\" }}>\n        <Button\n          fullWidth\n          variant=\"contained\"\n          size=\"large\"\n          startIcon={loading ? <CircularProgress color=\"inherit\" size={30} /> : null}\n          onClick={handleConfirm}\n        >\n          <Trans>Confirm Burn</Trans>\n        </Button>\n      </Box>\n    </Modal>\n  );\n}\n","import { Box, Typography } from \"@mui/material\";\nimport { useState, useMemo } from \"react\";\nimport {\n  MainCard,\n  Breadcrumbs,\n  FilledTextField,\n  NumberFilledTextField,\n  MaxButton,\n  AuthButton,\n  SelectToken,\n} from \"components/index\";\nimport { type AllTokenOfSwapTokenInfo, TOKEN_STANDARD } from \"@w2e/types\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { useTokenMintingAccount } from \"@w2e/hooks\";\nimport { useTokenBalance } from \"hooks/token/useTokenBalance\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { useTokenInfo } from \"hooks/token\";\nimport { parseTokenAmount, BigNumber } from \"@w2e/utils\";\nimport { CardContent1120 } from \"components/Layout/CardContent1120\";\n\nimport { ConfirmBurnModal } from \"./ConfirmBurn\";\n\nexport default function ConsoleBurn() {\n  const principal = useAccountPrincipal();\n  const [tokenId, setTokenId] = useState<string | undefined>(undefined);\n  const [amount, setAmount] = useState<string | undefined>(undefined);\n  const [confirmModalOpen, setConfirmModalOpen] = useState<boolean>(false);\n\n  const handleTokenChange = (tokenId: string) => {\n    setTokenId(tokenId);\n  };\n\n  const { result: tokenInfo } = useTokenInfo(tokenId);\n  const { result: mintingAccount } = useTokenMintingAccount(tokenId);\n  const { result: balance } = useTokenBalance(tokenId, principal);\n\n  const handleMax = () => {\n    if (!balance || !tokenInfo) return;\n\n    setAmount(parseTokenAmount(balance.minus(tokenInfo.transFee.toString()), tokenInfo.decimals).toString());\n  };\n\n  const handleBurnSuccess = () => {\n    setAmount(\"\");\n  };\n\n  const error = useMemo(() => {\n    if (!tokenId) return t`Select a token`;\n    if (!tokenInfo || !balance || !mintingAccount) return t`Waiting for fetch data`;\n    if (!amount) return t`Enter the amount`;\n    if (new BigNumber(amount).isEqualTo(0)) return t`Must be greater than 0`;\n\n    if (parseTokenAmount(balance.minus(tokenInfo.transFee.toString()), tokenInfo.decimals).isLessThan(amount))\n      return t`Insufficient Balance`;\n  }, [amount, balance, tokenInfo, mintingAccount, tokenId]);\n\n  const showMax = useMemo(() => {\n    if (!balance || !tokenInfo) return false;\n    if (!balance.isGreaterThan(tokenInfo.transFee.toString())) return false;\n    return true;\n  }, [balance, tokenInfo]);\n\n  return (\n    <CardContent1120>\n      <Breadcrumbs prevLabel={<Trans>Console</Trans>} prevLink=\"/console\" currentLabel={<Trans>Burn Tool</Trans>} />\n\n      <MainCard sx={{ margin: \"16px 0 0 0\" }}>\n        <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n          <Box sx={{ width: \"100%\", maxWidth: \"474px\", padding: \"28px 0\" }}>\n            <Typography sx={{ fontSize: \"20px\", fontWeight: 700, color: \"text.primary\" }}>\n              <Trans>Confirm Burn</Trans>\n            </Typography>\n\n            <Box sx={{ margin: \"32px 0 0 0\" }}>\n              <Box>\n                <Typography sx={{ fontSize: \"16px\" }}>\n                  <Trans>Token</Trans>\n                </Typography>\n\n                <Box sx={{ margin: \"12px 0 0 0\" }}>\n                  <Box sx={{ height: \"48px\" }}>\n                    <SelectToken\n                      value={tokenId}\n                      filled\n                      search\n                      fullHeight\n                      onTokenChange={handleTokenChange}\n                      filter={(tokenInfo: AllTokenOfSwapTokenInfo) =>\n                        tokenInfo.standard !== TOKEN_STANDARD.ICRC1 && tokenInfo.standard !== TOKEN_STANDARD.ICRC2\n                      }\n                    />\n                  </Box>\n                </Box>\n              </Box>\n\n              <Box sx={{ margin: \"24px 0 0 0\" }}>\n                <Typography sx={{ fontSize: \"16px\" }}>\n                  <Trans>Minting Account</Trans>\n                </Typography>\n\n                <Box sx={{ margin: \"12px 0 0 0\" }}>\n                  <FilledTextField border=\"none\" disabled value={mintingAccount?.owner} />\n                </Box>\n              </Box>\n\n              <Box sx={{ margin: \"24px 0 0 0\" }}>\n                <Typography sx={{ fontSize: \"16px\" }}>\n                  <Trans>Amount</Trans>\n                </Typography>\n\n                <Box sx={{ margin: \"12px 0 0 0\" }}>\n                  <NumberFilledTextField\n                    value={amount}\n                    border=\"none\"\n                    onChange={(value: string) => setAmount(value)}\n                    numericProps={{\n                      thousandSeparator: true,\n                      decimalScale: tokenInfo?.decimals ?? 18,\n                      allowNegative: false,\n                      maxLength: 20,\n                    }}\n                  />\n                </Box>\n              </Box>\n\n              <Box sx={{ margin: \"20px 0 0 0\", display: \"flex\", gap: \"0 8px\", alignItems: \"center\" }}>\n                <Typography>\n                  <Trans>Balance:</Trans>\n                  &nbsp;\n                  <Typography component=\"span\">\n                    {tokenInfo && balance ? parseTokenAmount(balance, tokenInfo.decimals).toFormat() : \"--\"}\n                  </Typography>\n                </Typography>\n                {showMax ? <MaxButton background=\"rgba(86, 105, 220, 0.50)\" onClick={handleMax} /> : null}\n              </Box>\n\n              <Box sx={{ margin: \"34px 0 0 0\" }}>\n                <AuthButton\n                  fullWidth\n                  variant=\"contained\"\n                  size=\"large\"\n                  onClick={() => setConfirmModalOpen(true)}\n                  disabled={error !== undefined}\n                >\n                  {error ?? <Trans>Burn</Trans>}\n                </AuthButton>\n              </Box>\n            </Box>\n          </Box>\n        </Box>\n\n        <ConfirmBurnModal\n          token={tokenInfo}\n          open={confirmModalOpen}\n          onClose={() => setConfirmModalOpen(false)}\n          mintingAccount={mintingAccount}\n          amount={amount}\n          onBurnSuccess={handleBurnSuccess}\n        />\n      </MainCard>\n    </CardContent1120>\n  );\n}\n","import { useCallback } from \"react\";\nimport { isPrincipal, isAvailablePageArgs } from \"@w2e/utils\";\nimport { tokenAdapter } from \"@w2e/token-adapter\";\nimport { Principal } from \"@dfinity/principal\";\nimport type { ActorIdentity, StatusResult } from \"@w2e/types\";\n\nimport { useCallsData } from \"../useCallData\";\n\nexport async function getTokenTotalHolder(canisterId: string | undefined) {\n  return (\n    await tokenAdapter.totalHolders({\n      canisterId: canisterId!,\n    })\n  ).data;\n}\n\nexport function useTokenTotalHolder(canisterId: string | undefined, reload?: boolean) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId) return undefined;\n      return await getTokenTotalHolder(canisterId);\n    }, [canisterId]),\n    reload,\n  );\n}\n\nexport async function getTokenHolders(canisterId: string, offset: number, limit: number) {\n  return (\n    await tokenAdapter.holders({\n      canisterId,\n      params: {\n        offset: BigInt(offset),\n        limit: BigInt(limit),\n      },\n    })\n  ).data;\n}\n\nexport function useTokenHolders(canisterId: string, offset: number, limit: number) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId || !isAvailablePageArgs(offset, limit)) return undefined;\n      return await getTokenHolders(canisterId, offset, limit);\n    }, [offset, limit, canisterId]),\n  );\n}\n\nexport interface getTokenTransactionProps {\n  canisterId: string;\n  account: string | undefined | null | Principal;\n  offset: number;\n  limit: number;\n  capId?: string;\n  witness?: boolean;\n}\n\nexport async function getTokenTransaction({\n  canisterId,\n  account,\n  offset,\n  limit,\n  capId,\n  witness,\n}: getTokenTransactionProps) {\n  return (\n    await tokenAdapter.transactions({\n      canisterId,\n      params: {\n        user: account ? (isPrincipal(account) ? { principal: account } : { address: account }) : undefined,\n        offset,\n        limit,\n        index: undefined,\n        hash: undefined,\n        capId,\n        witness,\n      },\n    })\n  ).data;\n}\n\nexport interface useTokenTransactionsProps {\n  canisterId: string;\n  account: string | undefined | null | Principal;\n  offset: number;\n  limit: number;\n  cap?: boolean;\n  capId?: string;\n  witness?: boolean;\n}\n\nexport function useTokenTransactions({\n  canisterId,\n  account,\n  offset,\n  limit,\n  capId,\n  witness,\n}: useTokenTransactionsProps) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId || !isAvailablePageArgs(offset, limit)) return undefined;\n\n      return getTokenTransaction({\n        canisterId,\n        account,\n        offset,\n        limit,\n        capId,\n        witness,\n      });\n    }, [offset, limit, canisterId, account, capId, witness]),\n  );\n}\n\nexport async function getTokenSupply(canisterId: string) {\n  return (await tokenAdapter.supply({ canisterId: canisterId! })).data;\n}\n\nexport function useTokenSupply(canisterId: string | undefined, reload?: boolean) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId) return undefined;\n      return await getTokenSupply(canisterId!);\n    }, [canisterId]),\n    reload,\n  );\n}\n\nexport async function getTokenMetadata(canisterId: string) {\n  return (await tokenAdapter.metadata({ canisterId })).data;\n}\n\nexport function useTokenMetadata(canisterId: string | undefined) {\n  return useCallsData(\n    useCallback(async () => await getTokenMetadata(canisterId!), [canisterId]),\n    !!canisterId,\n  );\n}\n\nexport interface Allowance {\n  canisterId: string;\n  account: Principal | string;\n  spenderCanisterId: string;\n  subaccount?: number[];\n}\n\nexport async function allowance({ canisterId, account, spenderCanisterId, subaccount }: Allowance) {\n  return (\n    await tokenAdapter.allowance({\n      canisterId,\n      params: {\n        spender: Principal.fromText(spenderCanisterId),\n        owner: isPrincipal(account) ? { principal: account } : { address: account },\n        subaccount,\n      },\n    })\n  ).data;\n}\n\nexport interface Approve {\n  canisterId: string;\n  identity: ActorIdentity;\n  spenderCanisterId: string;\n  value: number | string | bigint;\n  account: string | Principal | undefined;\n  subaccount?: number[];\n}\n\nexport async function approve({ canisterId, identity, spenderCanisterId, value, account, subaccount }: Approve) {\n  return tokenAdapter.approve({\n    canisterId,\n    identity,\n    params: {\n      spender: Principal.fromText(spenderCanisterId),\n      allowance: BigInt(value),\n      subaccount,\n      account: account!,\n    },\n  });\n}\n\nexport function useApproveCallback(): (approveParams: Approve) => Promise<StatusResult<boolean>> {\n  return useCallback(async ({ canisterId, identity, spenderCanisterId, value, account }: Approve) => {\n    if (!account)\n      return await Promise.resolve({\n        status: \"err\",\n        message: \"Invalid account\",\n      } as StatusResult<boolean>);\n\n    const allowedBalance = await allowance({\n      canisterId,\n      account,\n      spenderCanisterId,\n    });\n\n    if (!allowedBalance || allowedBalance === BigInt(0) || BigInt(value ?? 0) > allowedBalance) {\n      return await approve({\n        canisterId,\n        identity,\n        spenderCanisterId,\n        value,\n        account,\n      });\n    }\n    return await Promise.resolve({\n      status: \"ok\",\n      data: true,\n      message: \"You have approved successfully\",\n    } as StatusResult<boolean>);\n  }, []);\n}\n\nexport async function getTokenMintingAccount(canisterId: string) {\n  return (await tokenAdapter.getMintingAccount({ canisterId })).data;\n}\n\nexport function useTokenMintingAccount(canisterId: string | undefined) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId) return undefined;\n      return await getTokenMintingAccount(canisterId);\n    }, [canisterId]),\n  );\n}\n","import React, { ReactNode } from \"react\";\nimport { Box, Button, Dialog, DialogTitle, DialogContent, Typography, useMediaQuery } from \"@mui/material\";\nimport { makeStyles, useTheme } from \"@mui/styles\";\nimport { XCircle } from \"react-feather\";\nimport { Theme } from \"@mui/material/styles\";\nimport { isElement } from \"react-is\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  titleContainer: {\n    position: \"relative\",\n  },\n  title: {\n    fontSize: \"20px\",\n    fontWeight: 700,\n    \"@media (max-width: 640px)\": {\n      fontSize: \"1rem\",\n    },\n    \"&.warning\": {\n      color: \"#D3625B\",\n    },\n  },\n  detailItem: {\n    marginBottom: \"24px\",\n  },\n  value: {\n    textAlign: \"right\",\n    wordBreak: \"break-all\",\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: 0,\n    top: \"50%\",\n    transform: \"translate(0, -50%)\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.colors.primaryMain,\n    },\n    \"&.warning\": {\n      color: \"#D3625B\",\n      \"&:hover\": {\n        color: \"#D3625B\",\n      },\n    },\n  },\n  closeButton1: {\n    position: \"absolute\",\n    right: \"5px\",\n    top: \"5px\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.colors.primaryMain,\n    },\n    \"&.warning\": {\n      color: \"#D3625B\",\n      \"&:hover\": {\n        color: \"#D3625B\",\n      },\n    },\n  },\n}));\n\nexport interface ModalProps {\n  title?: string | React.ReactNode;\n  showClose?: boolean;\n  children: React.ReactNode;\n  open: boolean;\n  confirmText?: ReactNode;\n  cancelText?: ReactNode;\n  onClose?: () => void;\n  onConfirm?: () => void;\n  onCancel?: () => void;\n  showConfirm?: boolean;\n  showCancel?: boolean;\n  confirmDisabled?: boolean;\n  fullWidth?: boolean;\n  maxWidth?: string;\n  dialogProps?: any;\n  type?: string;\n  background?: string;\n  [key: string]: any;\n}\n\nexport function Modal({\n  title,\n  children,\n  open,\n  confirmText = `Confirm`,\n  cancelText = `Cancel`,\n  onClose,\n  onConfirm,\n  onCancel,\n  showConfirm = false,\n  showCancel = false,\n  showClose = true,\n  confirmDisabled,\n  fullWidth = true,\n  maxWidth = \"sm\",\n  type,\n  background,\n  dialogProps,\n}: ModalProps) {\n  const classes = useStyles();\n  const theme = useTheme() as Theme;\n  const matchDownMD = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n  const down760 = useMediaQuery(\"(max-width:760px)\");\n\n  return (\n    <Dialog\n      onClose={onClose}\n      open={open}\n      maxWidth={maxWidth}\n      fullWidth={fullWidth}\n      {...dialogProps}\n      sx={{\n        \"& .MuiDialogTitle-root\": {\n          ...(matchDownMD ? { padding: \"8px 14px\" } : {}),\n          \"&+.MuiDialogContent-root\": {\n            paddingTop: \"5px\",\n            ...(matchDownMD ? { paddingTop: \"5px\" } : {}),\n          },\n        },\n        \"& .MuiDialogContent-root\": {\n          position: \"relative\",\n          ...(matchDownMD ? { padding: \"8px 14px\" } : {}),\n        },\n        ...{\n          \"& .MuiPaper-root\": {\n            ...(background ? { backgroundColor: background } : { backgroundColor: theme.palette.background.level2 }),\n          },\n          ...(dialogProps?.sx || {}),\n        },\n      }}\n    >\n      {title ? (\n        isElement(title) ? (\n          title\n        ) : (\n          <DialogTitle>\n            <Typography sx={{ position: \"relative\" }} component=\"div\">\n              <Typography className={`${classes.title} ${type || \"\"}`} component=\"span\" color=\"textPrimary\">\n                {title}\n              </Typography>\n              {showClose ? <XCircle onClick={onClose} className={`${classes.closeButton} ${type || \"\"}`} /> : null}\n            </Typography>\n          </DialogTitle>\n        )\n      ) : null}\n      <DialogContent>\n        {showClose && !title ? (\n          <XCircle onClick={onClose} className={`${classes.closeButton1} ${type || \"\"} `} />\n        ) : null}\n        {children}\n\n        {showConfirm || showCancel ? (\n          <Box\n            mt=\"40px\"\n            sx={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              gridTemplateColumns: down760 ? \"1fr\" : showConfirm && showCancel ? \"1fr 1fr\" : \"1fr\",\n              gap: down760 ? \"10px 10px\" : \"0 10px\",\n            }}\n          >\n            {showCancel ? (\n              <Button onClick={onCancel} variant=\"outlined\">\n                {cancelText}\n              </Button>\n            ) : null}\n            {showConfirm ? (\n              <Button disabled={confirmDisabled} variant=\"contained\" onClick={onConfirm}>\n                {confirmText}\n              </Button>\n            ) : null}\n          </Box>\n        ) : null}\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":["CardContent1120","_ref","children","_jsx","Box","sx","display","width","justifyContent","maxWidth","ConfirmBurnModal","open","onClose","token","mintingAccount","amount","onBurnSuccess","principal","useAccountPrincipal","loading","setLoading","useState","openSuccessTip","useSuccessTip","openErrorTip","useErrorTip","openLoadingTip","closeLoadingTip","useLoadingTip","_jsxs","Modal","title","i18n","_","id","padding","flexDirection","alignItems","TokenImage","logo","size","Typography","fontSize","fontWeight","color","margin","symbol","Trans","owner","BigNumber","toFormat","Button","fullWidth","variant","startIcon","CircularProgress","onClick","async","undefined","loadingKey","values","0","status","message","tokenTransfer","canisterId","to","subaccount","sub","from","toString","formatTokenAmount","decimals","concat","ConsoleBurn","_tokenInfo$decimals","tokenId","setTokenId","setAmount","confirmModalOpen","setConfirmModalOpen","result","tokenInfo","useTokenInfo","useTokenMintingAccount","balance","useTokenBalance","error","useMemo","isEqualTo","parseTokenAmount","minus","transFee","isLessThan","showMax","isGreaterThan","Breadcrumbs","prevLabel","prevLink","currentLabel","MainCard","height","SelectToken","value","filled","search","fullHeight","onTokenChange","filter","standard","TOKEN_STANDARD","ICRC1","ICRC2","FilledTextField","border","disabled","NumberFilledTextField","onChange","numericProps","thousandSeparator","decimalScale","allowNegative","maxLength","gap","component","MaxButton","background","handleMax","AuthButton","handleBurnSuccess","useTokenTotalHolder","reload","useCallsData","useCallback","__awaiter","tokenAdapter","totalHolders","data","getTokenTotalHolder","useTokenSupply","supply","getTokenSupply","getMintingAccount","getTokenMintingAccount","useStyles","makeStyles","theme","titleContainer","position","detailItem","marginBottom","textAlign","wordBreak","closeButton","right","top","transform","cursor","colors","primaryMain","closeButton1","confirmText","cancelText","onConfirm","onCancel","showConfirm","showCancel","showClose","confirmDisabled","type","dialogProps","classes","useTheme","matchDownMD","useMediaQuery","breakpoints","down","down760","Dialog","Object","assign","paddingTop","backgroundColor","palette","level2","isElement","DialogTitle","className","XCircle","DialogContent","mt","gridTemplateColumns"],"sourceRoot":""}