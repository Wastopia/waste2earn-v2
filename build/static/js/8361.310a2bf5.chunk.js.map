{"version":3,"file":"static/js/8361.310a2bf5.chunk.js","mappings":"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","sources":["assets/icons/Copy.svg","utils/sns/date.ts","utils/sns/votingPower.ts","utils/sns/vote.ts","utils/sns/neurons.ts","../packages/constants/src/date.ts","../packages/constants/src/sns.ts","../packages/hooks/src/sns/neuronCommand.ts","../packages/hooks/src/sns/governance.ts","../packages/ui/src/components/Modal/ConfirmModal.tsx","../packages/ui/src/components/Modal/Modal.tsx","../packages/utils/src/converter.ts","../packages/utils/src/nowInSeconds.ts"],"sourcesContent":["var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCopy(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 12,\n    height: 12,\n    viewBox: \"0 0 12 12\",\n    fill: \"currentColor\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M8 4H2V10H8V4ZM2 3C1.44772 3 1 3.44772 1 4V10C1 10.5523 1.44772 11 2 11H8C8.55228 11 9 10.5523 9 10V4C9 3.44772 8.55228 3 8 3H2Z\",\n    fill: \"currentColor\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M10 9L10 2L3 2L3 0.999999L10 1C10.5523 1 11 1.44772 11 2L11 9L10 9Z\",\n    fill: \"currentColor\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCopy);\nexport default __webpack_public_path__ + \"static/media/Copy.351d8604b102850f77eb6e2d05b49bb6.svg\";\nexport { ForwardRef as ReactComponent };","import { SECONDS_IN_YEAR, SECONDS_IN_MONTH, SECONDS_IN_DAY } from \"@w2e/constants\";\n\ntype LabelKey = \"year\" | \"month\" | \"day\" | \"hour\" | \"minute\" | \"second\";\ntype LabelInfo = {\n  labelKey: LabelKey;\n  amount: number;\n};\nconst createLabel = (labelKey: LabelKey, amount: bigint): LabelInfo => ({\n  labelKey,\n  amount: Number(amount),\n});\n\nexport const secondsToDissolveDelayDuration = (seconds: bigint): string => {\n  const years = seconds / BigInt(SECONDS_IN_YEAR);\n  const months = (seconds % BigInt(SECONDS_IN_YEAR)) / BigInt(SECONDS_IN_MONTH);\n  const days = BigInt(Math.ceil((Number(seconds) % SECONDS_IN_MONTH) / SECONDS_IN_DAY));\n  const periods = [createLabel(\"year\", years), createLabel(\"month\", months), createLabel(\"day\", days)];\n\n  return periods\n    .filter(({ amount }) => amount > 0)\n    .map((labelInfo) => `${labelInfo.amount} ${labelInfo.labelKey}`)\n    .join(\", \");\n};\n","import type { Neuron, ProposalData } from \"@w2e/types\";\nimport { neuronFormat } from \"./neurons\";\n\nexport function getVotingPower(neuron: Neuron, proposal: ProposalData) {\n  let voting_power = BigInt(0);\n\n  const neuronId = neuronFormat(neuron).id;\n  const ballot = proposal.ballots.find(([ballotId]) => ballotId === neuronId);\n\n  if (ballot) {\n    voting_power = ballot[1].voting_power;\n  }\n\n  return voting_power;\n}\n\nexport function getVotingPowers(neurons: Neuron[], proposal: ProposalData) {\n  let voting_powers = BigInt(0);\n\n  neurons.forEach((neuron) => {\n    const neuronId = neuronFormat(neuron).id;\n    const ballot = proposal.ballots.find(([ballotId]) => ballotId === neuronId);\n\n    if (ballot) {\n      voting_powers += ballot[1].voting_power;\n    }\n  });\n\n  return voting_powers;\n}\n","import type { Neuron, ProposalData } from \"@w2e/types\";\nimport { neuronFormat } from \"./neurons\";\n\nexport function getVote(neuron: Neuron, proposal: ProposalData) {\n  const neuronId = neuronFormat(neuron).id;\n  const ballot = proposal.ballots.find(([ballotId]) => ballotId === neuronId);\n\n  return ballot?.[1];\n}\n","import type { Neuron, DissolveState, NervousSystemParameters, ProposalData, SnsBallot } from \"@w2e/types\";\nimport { BigNumber, nowInSeconds, toHexString, asciiStringToByteArray } from \"@w2e/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport { SubAccount } from \"@dfinity/ledger-icp\";\nimport { arrayOfNumberToUint8Array } from \"@dfinity/utils\";\nimport { sha256 } from \"@noble/hashes/sha256\";\n\nexport enum NeuronState {\n  Unspecified = 0,\n  Locked = 1,\n  Dissolving = 2,\n  Dissolved = 3,\n  Spawning = 4,\n}\n\nexport enum NeuronStateText {\n  Unspecified = \"Unspecified\",\n  Locked = \"Locked\",\n  Dissolving = \"Dissolving\",\n  Dissolved = \"Dissolved\",\n  Spawning = \"Spawning\",\n}\n\nexport function neuronStateText(state: NeuronState): NeuronStateText | undefined {\n  switch (state) {\n    case NeuronState.Dissolved:\n      return NeuronStateText.Dissolved;\n    case NeuronState.Dissolving:\n      return NeuronStateText.Dissolving;\n    case NeuronState.Unspecified:\n      return NeuronStateText.Unspecified;\n    case NeuronState.Spawning:\n      return NeuronStateText.Spawning;\n    case NeuronState.Locked:\n      return NeuronStateText.Locked;\n    default:\n      break;\n  }\n}\n\nexport function neuronState(state: DissolveState | undefined): NeuronState {\n  if (!state) return NeuronState.Unspecified;\n\n  const state_key = Object.keys(state)[0];\n\n  if (state_key === \"DissolveDelaySeconds\") {\n    const delay_seconds: bigint = state[state_key];\n    if (new BigNumber(delay_seconds.toString()).gt(0)) return NeuronState.Locked;\n    return NeuronState.Dissolved;\n  }\n\n  const now = new Date().getTime();\n  const dissolve_time: bigint = state[state_key];\n  if (new BigNumber(dissolve_time.toString()).times(1000).gt(now)) return NeuronState.Dissolving;\n  return NeuronState.Dissolved;\n}\n\nexport function neuronFormat(neuron: Neuron) {\n  const neuronId = neuron.id[0];\n\n  const hex = neuronId ? toHexString(neuronId.id) : undefined;\n\n  const dissolve_state = neuron.dissolve_state[0];\n\n  const dissolve_delay = dissolve_state\n    ? \"DissolveDelaySeconds\" in dissolve_state\n      ? dissolve_state.DissolveDelaySeconds\n      : undefined\n    : undefined;\n\n  const when_dissolved_timestamp_seconds = dissolve_state\n    ? \"WhenDissolvedTimestampSeconds\" in dissolve_state\n      ? dissolve_state.WhenDissolvedTimestampSeconds\n      : undefined\n    : undefined;\n\n  return {\n    ...neuron,\n    id: hex,\n    staked_maturity_e8s_equivalent: neuron.staked_maturity_e8s_equivalent[0],\n    source_nns_neuron_id: neuron.source_nns_neuron_id[0],\n    auto_stake_maturity: neuron.auto_stake_maturity[0],\n    dissolve_state: neuronState(neuron.dissolve_state[0]),\n    dissolve_state_text: neuronStateText(neuronState(neuron.dissolve_state[0])),\n    dissolve_delay,\n    when_dissolved_timestamp_seconds,\n    vesting_period_seconds: neuron.vesting_period_seconds[0],\n    neuron,\n  };\n}\n\nexport const getDissolvingTimestampSeconds = (neuron: Neuron): bigint | undefined => {\n  const dissolve_state = neuron.dissolve_state[0];\n\n  if (dissolve_state === undefined) return undefined;\n\n  return neuronState(dissolve_state) === NeuronState.Dissolving && \"WhenDissolvedTimestampSeconds\" in dissolve_state\n    ? dissolve_state.WhenDissolvedTimestampSeconds\n    : undefined;\n};\n\nexport const getSnsNeuronState = ({ dissolve_state }: Neuron): NeuronState => {\n  const dissolveState = dissolve_state[0];\n\n  if (dissolveState === undefined) {\n    return NeuronState.Dissolved;\n  }\n  if (\"DissolveDelaySeconds\" in dissolveState) {\n    return dissolveState.DissolveDelaySeconds === 0n\n      ? // 0 = already dissolved (more info: https://gitlab.com/dfinity-lab/public/ic/-/blob/master/rs/nns/governance/src/governance.rs#L827)\n        NeuronState.Dissolved\n      : NeuronState.Locked;\n  }\n  if (\"WhenDissolvedTimestampSeconds\" in dissolveState) {\n    // In case `nowInSeconds` ever changes and doesn't return an integer we use Math.floor\n    return dissolveState.WhenDissolvedTimestampSeconds < BigInt(Math.floor(nowInSeconds()))\n      ? NeuronState.Dissolved\n      : NeuronState.Dissolving;\n  }\n  return NeuronState.Unspecified;\n};\n\nexport const getSnsLockedTimeInSeconds = (neuron: Neuron): bigint | undefined => {\n  const neuronState = getSnsNeuronState(neuron);\n  const dissolveState = neuron.dissolve_state[0];\n\n  if (neuronState === NeuronState.Locked && dissolveState !== undefined && \"DissolveDelaySeconds\" in dissolveState) {\n    return dissolveState.DissolveDelaySeconds;\n  }\n};\n\nexport const getSnsDelayTimeInSeconds = (neuron: Neuron): bigint | undefined => {\n  const neuronState = getSnsNeuronState(neuron);\n  const dissolveState = neuron.dissolve_state[0];\n\n  if (neuronState === NeuronState.Locked && dissolveState !== undefined && \"DissolveDelaySeconds\" in dissolveState) {\n    return dissolveState.DissolveDelaySeconds;\n  }\n\n  if (\n    neuronState === NeuronState.Dissolving &&\n    dissolveState !== undefined &&\n    \"WhenDissolvedTimestampSeconds\" in dissolveState\n  ) {\n    return dissolveState.WhenDissolvedTimestampSeconds - BigInt(parseInt((new Date().getTime() / 1000).toString(), 10));\n  }\n};\n\nexport const getDissolvingTimeInSeconds = (neuron: Neuron): bigint | undefined => {\n  const dissolvingTimestamp = getDissolvingTimestampSeconds(neuron);\n  if (dissolvingTimestamp === undefined) return undefined;\n  return dissolvingTimestamp - BigInt(nowInSeconds());\n};\n\n// export const getSpawningTimeInSeconds = (neuron: Neuron): bigint | undefined => {\n//   const dissolve_state = neuron.dissolve_state[0];\n\n//   if (dissolve_state === undefined || neuron.) return undefined;\n\n//   return neuronState(dissolve_state) === NeuronState.Spawning ? neuron?.spawnAtTimesSeconds !== undefined\n//     ? neuron.fullNeuron.spawnAtTimesSeconds - BigInt(nowInSeconds())\n//     : undefined;\n// }\n\nexport function getNervousVotingPower(\n  neuron: Neuron,\n  nervousSystemParameters: NervousSystemParameters,\n  decimals: number,\n) {\n  const dissolve_state = neuron.dissolve_state[0];\n\n  if (!dissolve_state) return undefined;\n\n  let dissolve_delay = 0;\n\n  const state_key = Object.keys(dissolve_state)[0];\n\n  if (state_key === \"DissolveDelaySeconds\") {\n    const delay_seconds: bigint = dissolve_state[state_key];\n    dissolve_delay = Number(delay_seconds);\n  } else {\n    const now = Math.ceil(new Date().getTime() / 1000);\n    const dissolve_time: bigint = dissolve_state[state_key];\n    if (Number(dissolve_time) - now >= 0) {\n      dissolve_delay = Number(dissolve_time) - now;\n    } else {\n      dissolve_delay = 0;\n    }\n  }\n\n  const neuron_minimum_dissolve_delay_to_vote_seconds =\n    nervousSystemParameters.neuron_minimum_dissolve_delay_to_vote_seconds[0];\n  if (!neuron_minimum_dissolve_delay_to_vote_seconds) return 0;\n\n  if (\n    dissolve_delay === 0 ||\n    new BigNumber(dissolve_delay).lt(neuron_minimum_dissolve_delay_to_vote_seconds.toString(10))\n  ) {\n    return \"0\";\n  }\n\n  const max_dissolve_delay_seconds = nervousSystemParameters.max_dissolve_delay_seconds[0];\n  const max_dissolve_delay_bonus_percentage = nervousSystemParameters.max_dissolve_delay_bonus_percentage[0];\n\n  if (!max_dissolve_delay_seconds || !max_dissolve_delay_bonus_percentage) return 0;\n\n  const dissolveDelayBonus = new BigNumber(dissolve_delay)\n    .div(max_dissolve_delay_seconds.toString(10))\n    .times(max_dissolve_delay_bonus_percentage.toString(10))\n    .div(100)\n    .plus(1);\n\n  const now = new Date().getTime() / 1000;\n  let aging = BigInt(\n    parseInt(new BigNumber(now).minus(neuron.aging_since_timestamp_seconds.toString(10)).toString(10)),\n  );\n\n  if (state_key === \"WhenDissolvedTimestampSeconds\") {\n    aging = BigInt(0);\n  }\n\n  const max_neuron_age_for_age_bonus = nervousSystemParameters.max_neuron_age_for_age_bonus[0];\n  const max_age_bonus_percentage = nervousSystemParameters.max_age_bonus_percentage[0];\n\n  if (!max_neuron_age_for_age_bonus || !max_age_bonus_percentage) return 0;\n\n  const ageBonus = new BigNumber(aging.toString(10))\n    .div(max_neuron_age_for_age_bonus.toString(10))\n    .times(max_age_bonus_percentage.toString(10))\n    .div(100)\n    .plus(1);\n\n  const staked_maturity_e8s_equivalent = neuron.staked_maturity_e8s_equivalent[0] || BigInt(0);\n  const voting_balance = new BigNumber(neuron.cached_neuron_stake_e8s.toString(10))\n    .plus(staked_maturity_e8s_equivalent.toString(10))\n    .div(10 ** decimals)\n    .toString(10);\n\n  return new BigNumber(voting_balance)\n    .times(dissolveDelayBonus)\n    .times(ageBonus)\n    .times(neuron.voting_power_percentage_multiplier.toString(10))\n    .div(100)\n    .decimalPlaces(2, 0)\n    .toString(10);\n}\n\nexport function canSpawnNeuron(neuron: Neuron): boolean {\n  const maturity_e8s_equivalent = neuron.maturity_e8s_equivalent;\n  // 1/95\n  return new BigNumber(maturity_e8s_equivalent.toString()).lt(105263158);\n}\n\nexport interface IneligibleNeuronsArgs {\n  neurons: Neuron[];\n  proposal: ProposalData;\n}\n\nexport const filterIneligibleNeurons = ({ neurons, proposal }: IneligibleNeuronsArgs): Neuron[] => {\n  const { ballots, proposal_creation_timestamp_seconds } = proposal;\n\n  return neurons.filter((neuron: Neuron) => {\n    const { created_timestamp_seconds, id } = neuronFormat(neuron);\n\n    const createdSinceProposal: boolean = created_timestamp_seconds > proposal_creation_timestamp_seconds;\n\n    const dissolveTooShort: boolean = ballots.find(([ballotNeuronId]) => ballotNeuronId === id) === undefined;\n\n    return createdSinceProposal || dissolveTooShort;\n  });\n};\n\nexport interface VoteableForProposalArgs {\n  ballots: [string, SnsBallot][];\n  neuronId: string | undefined;\n}\n\nexport function voteableForProposal({ ballots, neuronId }: VoteableForProposalArgs) {\n  if (!neuronId) return undefined;\n  const ballot: [string, SnsBallot] | undefined = ballots.find(([id]) => id === neuronId);\n  if (!ballot) return false;\n  return ballot[1].vote === 0;\n}\n\nexport interface VotableNeuronsArgs {\n  neurons: Neuron[];\n  proposal: ProposalData;\n}\n\nexport const filterVotableNeurons = ({ neurons, proposal }: VotableNeuronsArgs): Neuron[] => {\n  return neurons.filter((neuron: Neuron) => {\n    const formattedNeuron = neuronFormat(neuron);\n\n    return (\n      voteableForProposal({ ballots: proposal.ballots, neuronId: formattedNeuron.id }) &&\n      filterIneligibleNeurons({ neurons, proposal }).find((ineligibleNeuron: Neuron) => {\n        const formattedIneligibleNeuron = neuronFormat(ineligibleNeuron);\n        return formattedNeuron.id === formattedIneligibleNeuron.id;\n      }) === undefined\n    );\n  });\n};\n\nexport interface VotedNeuronsArgs {\n  neurons: Neuron[];\n  proposal: ProposalData;\n}\n\nexport const filterVotedNeurons = ({ neurons, proposal }: VotedNeuronsArgs): Neuron[] => {\n  return neurons.filter((neuron: Neuron) => {\n    const formattedNeuron = neuronFormat(neuron);\n    return (\n      !voteableForProposal({ ballots: proposal.ballots, neuronId: formattedNeuron.id }) &&\n      filterIneligibleNeurons({ neurons, proposal }).find((ineligibleNeuron: Neuron) => {\n        const formattedIneligibleNeuron = neuronFormat(ineligibleNeuron);\n        return formattedNeuron.id === formattedIneligibleNeuron.id;\n      }) === undefined\n    );\n  });\n};\n\nexport function votingPowerFormat(votingPower_es8: bigint) {\n  return new BigNumber(votingPower_es8.toString()).dividedBy(10 ** 8).toFormat(2);\n}\n\nexport function getNeuronStakeSubAccountBytes(nonce: Uint8Array, principal: Principal): Uint8Array {\n  const padding = asciiStringToByteArray(\"neuron-stake\");\n  const shaObj = sha256.create();\n  shaObj.update(arrayOfNumberToUint8Array([0x0c, ...padding, ...principal.toUint8Array(), ...nonce]));\n  return shaObj.digest();\n}\n\nexport function buildNeuronStakeSubAccount(nonce: Uint8Array, principal: Principal): SubAccount {\n  return SubAccount.fromBytes(getNeuronStakeSubAccountBytes(nonce, principal)) as SubAccount;\n}\n","export const SECONDS_IN_MINUTE = 60;\nexport const MINUTES_IN_HOUR = 60;\nexport const HOURS_IN_DAY = 24;\nexport const SECONDS_IN_HOUR = SECONDS_IN_MINUTE * MINUTES_IN_HOUR;\nexport const SECONDS_IN_DAY = SECONDS_IN_HOUR * HOURS_IN_DAY;\n// Taking into account 1/4 of leap year\nexport const SECONDS_IN_YEAR = ((4 * 365 + 1) * SECONDS_IN_DAY) / 4;\nexport const SECONDS_IN_HALF_YEAR = SECONDS_IN_YEAR / 2;\nexport const SECONDS_IN_MONTH = SECONDS_IN_YEAR / 12;\nexport const SECONDS_IN_FOUR_YEARS = SECONDS_IN_YEAR * 4;\nexport const SECONDS_IN_EIGHT_YEARS = SECONDS_IN_YEAR * 8;\n","export enum SnsSwapLifecycle {\n  Unspecified = 0,\n  Pending = 1,\n  Open = 2,\n  Committed = 3,\n  Aborted = 4,\n  Adopted = 5,\n}\n\nexport enum Vote {\n  Unspecified = 0,\n  Yes = 1,\n  No = 2,\n}\n\nexport enum SnsProposalDecisionStatus {\n  PROPOSAL_DECISION_STATUS_UNSPECIFIED = 0,\n  PROPOSAL_DECISION_STATUS_OPEN = 1,\n  PROPOSAL_DECISION_STATUS_REJECTED = 2,\n  PROPOSAL_DECISION_STATUS_ADOPTED = 3,\n  PROPOSAL_DECISION_STATUS_EXECUTED = 4,\n  PROPOSAL_DECISION_STATUS_FAILED = 5,\n}\n\n// Source: https://github.com/dfinity/ic/blob/master/rs/sns/governance/proto/ic_sns_governance/pb/v1/governance.proto\nexport enum SnsNeuronPermissionType {\n  NEURON_PERMISSION_TYPE_UNSPECIFIED = 0,\n\n  // The principal has permission to configure the neuron's dissolve state. This includes\n  // start dissolving, stop dissolving, and increasing the dissolve delay for the neuron.\n  NEURON_PERMISSION_TYPE_CONFIGURE_DISSOLVE_STATE = 1,\n\n  // The principal has permission to add additional principals to modify the neuron.\n  // The nervous system parameter `NervousSystemParameters::neuron_grantable_permissions`\n  // determines the maximum set of privileges that a principal can grant to another principal in\n  // the given SNS.\n  NEURON_PERMISSION_TYPE_MANAGE_PRINCIPALS = 2,\n\n  // The principal has permission to submit proposals on behalf of the neuron.\n  // Submitting proposals can change a neuron's stake and thus this\n  // is potentially a balance changing operation.\n  NEURON_PERMISSION_TYPE_SUBMIT_PROPOSAL = 3,\n\n  // The principal has permission to vote and follow other neurons on behalf of the neuron.\n  NEURON_PERMISSION_TYPE_VOTE = 4,\n\n  // The principal has permission to disburse the neuron.\n  NEURON_PERMISSION_TYPE_DISBURSE = 5,\n\n  // The principal has permission to split the neuron.\n  NEURON_PERMISSION_TYPE_SPLIT = 6,\n\n  // The principal has permission to merge the neuron's maturity into\n  // the neuron's stake.\n  /**\n   * @deprecated\n   */\n  NEURON_PERMISSION_TYPE_MERGE_MATURITY = 7,\n\n  // The principal has permission to disburse the neuron's maturity to a\n  // given ledger account.\n  NEURON_PERMISSION_TYPE_DISBURSE_MATURITY = 8,\n\n  // The principal has permission to stake the neuron's maturity.\n  NEURON_PERMISSION_TYPE_STAKE_MATURITY = 9,\n\n  // The principal has permission to grant/revoke permission to vote and submit\n  // proposals on behalf of the neuron to other principals.\n  NEURON_PERMISSION_TYPE_MANAGE_VOTING_PERMISSION = 10,\n}\n\nexport const SnsNeuronPermissions: SnsNeuronPermissionType[] = [\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_CONFIGURE_DISSOLVE_STATE,\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_DISBURSE,\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_DISBURSE_MATURITY,\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_MANAGE_PRINCIPALS,\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_MANAGE_VOTING_PERMISSION,\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_SPLIT,\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_STAKE_MATURITY,\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_MERGE_MATURITY,\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_SUBMIT_PROPOSAL,\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_UNSPECIFIED,\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_VOTE,\n];\n\nexport const HotKeysPermissions: SnsNeuronPermissionType[] = [\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_SUBMIT_PROPOSAL,\n  SnsNeuronPermissionType.NEURON_PERMISSION_TYPE_VOTE,\n];\n","import type { Operation } from \"@w2e/types\";\n\nexport function neuronOperationCommand(operation: Operation): [] | [{ Configure: { operation: [] | [Operation] } }] {\n  return [\n    {\n      Configure: {\n        operation: [operation],\n      },\n    },\n  ];\n}\n","import { sns_governance } from \"@w2e/actor\";\nimport { useCallback } from \"react\";\nimport { availableArgsNull, resultFormat } from \"@w2e/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport type {\n  ListNeuronsResponse,\n  NervousSystemParameters,\n  GetNeuronResponse,\n  Neuron,\n  NeuronId,\n  ManageNeuronResponse,\n  ListNervousSystemFunctionsResponse,\n} from \"@w2e/types\";\nimport { useCallsData } from \"../useCallData\";\nimport { neuronOperationCommand } from \"./neuronCommand\";\n\nexport async function getNeuron(canisterId: string, neuron_id: Uint8Array | number[]) {\n  const result = resultFormat<GetNeuronResponse>(\n    await (\n      await sns_governance(canisterId)\n    ).get_neuron({\n      neuron_id: availableArgsNull<{ id: Uint8Array | number[] }>({ id: neuron_id }),\n    }),\n  ).data?.result;\n\n  const neuron: Neuron | undefined = result[0] ? (\"Neuron\" in result[0] ? result[0].Neuron : undefined) : undefined;\n\n  return neuron;\n}\n\nexport function useNeuron(\n  governance_id: string | undefined,\n  neuron_id: Uint8Array | number[] | undefined,\n  refresh?: number,\n) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!governance_id || !neuron_id) return undefined;\n      return await getNeuron(governance_id, neuron_id);\n    }, [governance_id, neuron_id]),\n    refresh,\n  );\n}\n\nexport interface GetListNeuronsArgs {\n  canisterId: string;\n  of_principal: string | undefined;\n  limit: number;\n  start_page_at: Uint8Array | number[] | undefined;\n}\n\nexport async function getListNeurons({ canisterId, of_principal, limit, start_page_at }: GetListNeuronsArgs) {\n  return resultFormat<ListNeuronsResponse>(\n    await (\n      await sns_governance(canisterId)\n    ).list_neurons({\n      of_principal: availableArgsNull<Principal>(of_principal ? Principal.fromText(of_principal) : undefined),\n      limit,\n      start_page_at: availableArgsNull<{ id: Uint8Array | number[] }>(\n        start_page_at ? { id: start_page_at } : undefined,\n      ),\n    }),\n  ).data?.neurons;\n}\n\nexport interface UseListNeuronsArgs {\n  canisterId: string | undefined;\n  of_principal?: string;\n  limit: number;\n  start_page_at?: Uint8Array | number[];\n  refresh?: boolean | number;\n}\n\nexport function useListNeurons({ canisterId, of_principal, limit, start_page_at, refresh }: UseListNeuronsArgs) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId || !of_principal) return undefined;\n      return await getListNeurons({ canisterId, of_principal, limit, start_page_at });\n    }, [canisterId, of_principal, limit, start_page_at]),\n    refresh,\n  );\n}\n\nexport async function getNervousSystemParameters(governance_id: string) {\n  return resultFormat<NervousSystemParameters>(\n    await (await sns_governance(governance_id)).get_nervous_system_parameters(null),\n  ).data;\n}\n\nexport function useNervousSystemParameters(governance_id: string | undefined) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!governance_id) return undefined;\n      return await getNervousSystemParameters(governance_id);\n    }, [governance_id]),\n  );\n}\n\nexport async function getNeuronSystemFunctions(governance_id: string) {\n  return resultFormat<ListNervousSystemFunctionsResponse>(\n    await (await sns_governance(governance_id)).list_nervous_system_functions(),\n  ).data;\n}\n\nexport function useNeuronSystemFunctions(governance_id: string | undefined) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!governance_id) return undefined;\n      return await getNeuronSystemFunctions(governance_id);\n    }, [governance_id]),\n  );\n}\n\nexport async function splitNeuron(\n  governance_id: string,\n  neuron_id: Uint8Array | number[],\n  amount: bigint,\n  memo: bigint,\n) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: [\n        {\n          Split: {\n            memo,\n            amount_e8s: amount,\n          },\n        },\n      ],\n    }),\n  );\n}\n\nexport async function stopDissolvingNeuron(governance_id: string, neuron_id: Uint8Array | number[]) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: neuronOperationCommand({\n        StopDissolving: {},\n      }),\n    }),\n  );\n}\n\nexport async function dissolveNeuron(governance_id: string, neuron_id: Uint8Array | number[]) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: neuronOperationCommand({ StartDissolving: {} }),\n    }),\n  );\n}\n\nexport async function increaseNeuronDelay(\n  governance_id: string,\n  neuron_id: Uint8Array | number[],\n  additionalDissolveDelaySeconds: bigint,\n) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: neuronOperationCommand({\n        IncreaseDissolveDelay: {\n          additional_dissolve_delay_seconds: Number(additionalDissolveDelaySeconds),\n        },\n      }),\n    }),\n  );\n}\n\nexport async function autoStakeMaturity(governance_id: string, neuron_id: Uint8Array | number[], autoStake: boolean) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: neuronOperationCommand({\n        ChangeAutoStakeMaturity: {\n          requested_setting_for_auto_stake_maturity: autoStake,\n        },\n      }),\n    }),\n  );\n}\n\nexport async function claimOrRefreshNeuronFromAccount(\n  governance_id: string,\n  controller: Principal,\n  memo: bigint,\n  subaccount: number[],\n) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount,\n      command: [\n        {\n          ClaimOrRefresh: {\n            by: [\n              {\n                MemoAndController: {\n                  controller: controller === undefined ? [] : [controller],\n                  memo,\n                },\n              },\n            ],\n          },\n        },\n      ],\n    }),\n  );\n}\n\nexport async function claimOrRefreshNeuron(governance_id: string, neuron_id: Uint8Array | number[]) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: [\n        {\n          ClaimOrRefresh: {\n            by: [\n              {\n                NeuronId: {},\n              },\n            ],\n          },\n        },\n      ],\n    }),\n  );\n}\n\nexport async function disburseNeuron(governance_id: string, neuron_id: Uint8Array | number[]) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: [\n        {\n          Disburse: {\n            to_account: [],\n            amount: [],\n          },\n        },\n      ],\n    }),\n  );\n}\n\nexport async function disburseNeuronMaturity(governance_id: string, neuron_id: Uint8Array | number[]) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: [\n        {\n          DisburseMaturity: {\n            to_account: [],\n            percentage_to_disburse: 100,\n          },\n        },\n      ],\n    }),\n  );\n}\n\nexport async function stakeNeuronMaturity(governance_id: string, neuron_id: Uint8Array | number[], percent: number) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: [\n        {\n          StakeMaturity: {\n            percentage_to_stake: [percent],\n          },\n        },\n      ],\n    }),\n  );\n}\n\nexport async function setNeuronFollows(\n  governance_id: string,\n  neuron_id: Uint8Array | number[],\n  function_id: bigint,\n  follows: NeuronId[],\n) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: [\n        {\n          Follow: {\n            function_id,\n            followees: follows,\n          },\n        },\n      ],\n    }),\n  );\n}\n\nexport async function neuronVoteForProposal(\n  governance_id: string,\n  neuron_id: Uint8Array | number[],\n  vote: number,\n  proposal_id: bigint,\n) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: [\n        {\n          RegisterVote: {\n            vote,\n            proposal: [{ id: proposal_id }],\n          },\n        },\n      ],\n    }),\n  );\n}\n\nexport async function neuronAddPermissions(\n  governance_id: string,\n  neuron_id: Uint8Array | number[],\n  principal: Principal,\n  permissions: Int32Array | number[],\n) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: [\n        {\n          AddNeuronPermissions: {\n            permissions_to_add: [\n              {\n                permissions,\n              },\n            ],\n            principal_id: [principal],\n          },\n        },\n      ],\n    }),\n  );\n}\n\nexport async function neuronRemovePermissions(\n  governance_id: string,\n  neuron_id: Uint8Array | number[],\n  principal: Principal,\n  permissions: Int32Array | number[],\n) {\n  return resultFormat<ManageNeuronResponse>(\n    await (\n      await sns_governance(governance_id, true)\n    ).manage_neuron({\n      subaccount: [...neuron_id],\n      command: [\n        {\n          RemoveNeuronPermissions: {\n            permissions_to_remove: [\n              {\n                permissions,\n              },\n            ],\n            principal_id: [principal],\n          },\n        },\n      ],\n    }),\n  );\n}\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { Modal } from \"./Modal\";\n\nexport interface ConfirmModalProps {\n  title: string | React.ReactNode;\n  showClose?: boolean;\n  open: boolean;\n  onClose?: () => void;\n  onConfirm?: () => void;\n  text: string;\n}\n\nexport function ConfirmModal({ title, open, text, onConfirm, onClose }: ConfirmModalProps) {\n  return (\n    <Modal open={open} title={title} showConfirm confirmText=\"Confirm\" onConfirm={onConfirm} onClose={onClose}>\n      <Typography color=\"text.primary\" fontSize=\"16px\">\n        {text}\n      </Typography>\n    </Modal>\n  );\n}\n","import React, { ReactNode } from \"react\";\nimport { Box, Button, Dialog, DialogTitle, DialogContent, Typography, useMediaQuery } from \"@mui/material\";\nimport { makeStyles, useTheme } from \"@mui/styles\";\nimport { XCircle } from \"react-feather\";\nimport { Theme } from \"@mui/material/styles\";\nimport { isElement } from \"react-is\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  titleContainer: {\n    position: \"relative\",\n  },\n  title: {\n    fontSize: \"20px\",\n    fontWeight: 700,\n    \"@media (max-width: 640px)\": {\n      fontSize: \"1rem\",\n    },\n    \"&.warning\": {\n      color: \"#D3625B\",\n    },\n  },\n  detailItem: {\n    marginBottom: \"24px\",\n  },\n  value: {\n    textAlign: \"right\",\n    wordBreak: \"break-all\",\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: 0,\n    top: \"50%\",\n    transform: \"translate(0, -50%)\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.colors.primaryMain,\n    },\n    \"&.warning\": {\n      color: \"#D3625B\",\n      \"&:hover\": {\n        color: \"#D3625B\",\n      },\n    },\n  },\n  closeButton1: {\n    position: \"absolute\",\n    right: \"5px\",\n    top: \"5px\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.colors.primaryMain,\n    },\n    \"&.warning\": {\n      color: \"#D3625B\",\n      \"&:hover\": {\n        color: \"#D3625B\",\n      },\n    },\n  },\n}));\n\nexport interface ModalProps {\n  title?: string | React.ReactNode;\n  showClose?: boolean;\n  children: React.ReactNode;\n  open: boolean;\n  confirmText?: ReactNode;\n  cancelText?: ReactNode;\n  onClose?: () => void;\n  onConfirm?: () => void;\n  onCancel?: () => void;\n  showConfirm?: boolean;\n  showCancel?: boolean;\n  confirmDisabled?: boolean;\n  fullWidth?: boolean;\n  maxWidth?: string;\n  dialogProps?: any;\n  type?: string;\n  background?: string;\n  [key: string]: any;\n}\n\nexport function Modal({\n  title,\n  children,\n  open,\n  confirmText = `Confirm`,\n  cancelText = `Cancel`,\n  onClose,\n  onConfirm,\n  onCancel,\n  showConfirm = false,\n  showCancel = false,\n  showClose = true,\n  confirmDisabled,\n  fullWidth = true,\n  maxWidth = \"sm\",\n  type,\n  background,\n  dialogProps,\n}: ModalProps) {\n  const classes = useStyles();\n  const theme = useTheme() as Theme;\n  const matchDownMD = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n  const down760 = useMediaQuery(\"(max-width:760px)\");\n\n  return (\n    <Dialog\n      onClose={onClose}\n      open={open}\n      maxWidth={maxWidth}\n      fullWidth={fullWidth}\n      {...dialogProps}\n      sx={{\n        \"& .MuiDialogTitle-root\": {\n          ...(matchDownMD ? { padding: \"8px 14px\" } : {}),\n          \"&+.MuiDialogContent-root\": {\n            paddingTop: \"5px\",\n            ...(matchDownMD ? { paddingTop: \"5px\" } : {}),\n          },\n        },\n        \"& .MuiDialogContent-root\": {\n          position: \"relative\",\n          ...(matchDownMD ? { padding: \"8px 14px\" } : {}),\n        },\n        ...{\n          \"& .MuiPaper-root\": {\n            ...(background ? { backgroundColor: background } : { backgroundColor: theme.palette.background.level2 }),\n          },\n          ...(dialogProps?.sx || {}),\n        },\n      }}\n    >\n      {title ? (\n        isElement(title) ? (\n          title\n        ) : (\n          <DialogTitle>\n            <Typography sx={{ position: \"relative\" }} component=\"div\">\n              <Typography className={`${classes.title} ${type || \"\"}`} component=\"span\" color=\"textPrimary\">\n                {title}\n              </Typography>\n              {showClose ? <XCircle onClick={onClose} className={`${classes.closeButton} ${type || \"\"}`} /> : null}\n            </Typography>\n          </DialogTitle>\n        )\n      ) : null}\n      <DialogContent>\n        {showClose && !title ? (\n          <XCircle onClick={onClose} className={`${classes.closeButton1} ${type || \"\"} `} />\n        ) : null}\n        {children}\n\n        {showConfirm || showCancel ? (\n          <Box\n            mt=\"40px\"\n            sx={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              gridTemplateColumns: down760 ? \"1fr\" : showConfirm && showCancel ? \"1fr 1fr\" : \"1fr\",\n              gap: down760 ? \"10px 10px\" : \"0 10px\",\n            }}\n          >\n            {showCancel ? (\n              <Button onClick={onCancel} variant=\"outlined\">\n                {cancelText}\n              </Button>\n            ) : null}\n            {showConfirm ? (\n              <Button disabled={confirmDisabled} variant=\"contained\" onClick={onConfirm}>\n                {confirmText}\n              </Button>\n            ) : null}\n          </Box>\n        ) : null}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","export const hexToBytes = (hex: string): number[] => {\n  let new_hex = hex;\n\n  if (new_hex.substr(0, 2) === \"0x\") {\n    new_hex = hex.replace(/^0x/i, \"\");\n  }\n\n  const bytes = [];\n\n  for (let i = 0; i < hex.length; i += 2) {\n    bytes.push(parseInt(hex.substr(i, 2), 16));\n  }\n\n  return bytes;\n};\n\nexport const toHexString = (bytes: Uint8Array | number[]): string => {\n  return [...bytes].reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n};\n\nexport const uint8ArrayToBigInt = (array: Uint8Array): bigint => {\n  const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n\n  if (typeof view.getBigUint64 === \"function\") return view.getBigUint64(0);\n\n  const high = BigInt(view.getUint32(0));\n  const low = BigInt(view.getUint32(4));\n  return (high << BigInt(32)) + low;\n};\n\nexport const asciiStringToByteArray = (text: string): Array<number> => {\n  return Array.from(text).map((c) => c.charCodeAt(0));\n};\n","export const nowInSeconds = () => Math.round(Date.now() / 1000);\n"],"names":["_path","_path2","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","SvgCopy","_ref","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","ref","id","fillRule","clipRule","d","ForwardRef","createLabel","labelKey","amount","Number","secondsToDissolveDelayDuration","seconds","years","BigInt","SECONDS_IN_YEAR","months","SECONDS_IN_MONTH","days","Math","ceil","SECONDS_IN_DAY","filter","map","labelInfo","concat","join","getVotingPower","neuron","proposal","voting_power","neuronId","neuronFormat","ballot","ballots","find","ballotId","getVotingPowers","neurons","voting_powers","forEach","_ref2","getVote","NeuronState","NeuronStateText","neuronStateText","state","Dissolved","Dissolving","Unspecified","Spawning","Locked","neuronState","state_key","keys","delay_seconds","BigNumber","toString","gt","now","Date","getTime","dissolve_time","times","hex","toHexString","undefined","dissolve_state","dissolve_delay","DissolveDelaySeconds","when_dissolved_timestamp_seconds","WhenDissolvedTimestampSeconds","staked_maturity_e8s_equivalent","source_nns_neuron_id","auto_stake_maturity","dissolve_state_text","vesting_period_seconds","getSnsNeuronState","dissolveState","floor","nowInSeconds","getSnsDelayTimeInSeconds","parseInt","getDissolvingTimeInSeconds","dissolvingTimestamp","getDissolvingTimestampSeconds","filterIneligibleNeurons","proposal_creation_timestamp_seconds","created_timestamp_seconds","createdSinceProposal","dissolveTooShort","_ref3","ballotNeuronId","voteableForProposal","_ref4","_ref5","vote","filterVotableNeurons","_ref6","formattedNeuron","ineligibleNeuron","formattedIneligibleNeuron","filterVotedNeurons","_ref7","votingPowerFormat","votingPower_es8","dividedBy","toFormat","buildNeuronStakeSubAccount","nonce","principal","SubAccount","fromBytes","padding","asciiStringToByteArray","shaObj","sha256","create","update","arrayOfNumberToUint8Array","toUint8Array","digest","getNeuronStakeSubAccountBytes","SECONDS_IN_HOUR","SnsSwapLifecycle","Vote","SnsProposalDecisionStatus","SnsNeuronPermissionType","Pending","Open","Committed","Aborted","Adopted","Yes","No","PROPOSAL_DECISION_STATUS_UNSPECIFIED","PROPOSAL_DECISION_STATUS_OPEN","PROPOSAL_DECISION_STATUS_REJECTED","PROPOSAL_DECISION_STATUS_ADOPTED","PROPOSAL_DECISION_STATUS_EXECUTED","PROPOSAL_DECISION_STATUS_FAILED","NEURON_PERMISSION_TYPE_UNSPECIFIED","NEURON_PERMISSION_TYPE_CONFIGURE_DISSOLVE_STATE","NEURON_PERMISSION_TYPE_MANAGE_PRINCIPALS","NEURON_PERMISSION_TYPE_SUBMIT_PROPOSAL","NEURON_PERMISSION_TYPE_VOTE","NEURON_PERMISSION_TYPE_DISBURSE","NEURON_PERMISSION_TYPE_SPLIT","NEURON_PERMISSION_TYPE_MERGE_MATURITY","NEURON_PERMISSION_TYPE_DISBURSE_MATURITY","NEURON_PERMISSION_TYPE_STAKE_MATURITY","NEURON_PERMISSION_TYPE_MANAGE_VOTING_PERMISSION","HotKeysPermissions","neuronOperationCommand","operation","Configure","P","Promise","resolve","reject","fulfilled","value","step","generator","next","e","rejected","throw","result","done","then","thisArg","_arguments","useNeuron","governance_id","neuron_id","refresh","useCallback","__awaiter","_a","resultFormat","sns_governance","canisterId","get_neuron","availableArgsNull","data","Neuron","getNeuron","useListNeurons","of_principal","limit","start_page_at","_b","list_neurons","Principal","fromText","getListNeurons","useNervousSystemParameters","get_nervous_system_parameters","getNervousSystemParameters","useNeuronSystemFunctions","list_nervous_system_functions","getNeuronSystemFunctions","splitNeuron","memo","manage_neuron","amount_e8s","stopDissolvingNeuron","StopDissolving","dissolveNeuron","subaccount","command","StartDissolving","increaseNeuronDelay","additionalDissolveDelaySeconds","additional_dissolve_delay_seconds","autoStakeMaturity","autoStake","requested_setting_for_auto_stake_maturity","claimOrRefreshNeuronFromAccount","controller","claimOrRefreshNeuron","NeuronId","disburseNeuron","to_account","disburseNeuronMaturity","percentage_to_disburse","stakeNeuronMaturity","percent","percentage_to_stake","setNeuronFollows","function_id","follows","followees","neuronVoteForProposal","proposal_id","neuronAddPermissions","permissions","principal_id","neuronRemovePermissions","ConfirmModal","open","text","onConfirm","onClose","_jsx","Modal","showConfirm","confirmText","children","Typography","color","fontSize","useStyles","makeStyles","theme","titleContainer","position","fontWeight","detailItem","marginBottom","textAlign","wordBreak","closeButton","right","top","transform","cursor","colors","primaryMain","closeButton1","cancelText","onCancel","showCancel","showClose","confirmDisabled","fullWidth","maxWidth","type","background","dialogProps","classes","useTheme","matchDownMD","useMediaQuery","breakpoints","down","down760","_jsxs","Dialog","sx","paddingTop","backgroundColor","palette","level2","isElement","DialogTitle","component","className","XCircle","onClick","DialogContent","Box","mt","display","justifyContent","gridTemplateColumns","gap","Button","variant","disabled","hexToBytes","new_hex","substr","replace","bytes","push","reduce","str","byte","padStart","uint8ArrayToBigInt","array","view","DataView","buffer","byteOffset","byteLength","getBigUint64","high","getUint32","low","Array","from","c","charCodeAt","round"],"sourceRoot":""}